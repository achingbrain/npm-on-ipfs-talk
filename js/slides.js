"use strict";function _typeof(e){function t(e){return n.apply(this,arguments)}var n,r;function i(e){return r.apply(this,arguments)}return(_typeof="function"==typeof Symbol&&"symbol"===_typeof(Symbol.iterator)?(r=function(e){return void 0===e?"undefined":_typeof(e)},i.toString=function(){return r.toString()},i):(n=function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":void 0===e?"undefined":_typeof(e)},t.toString=function(){return n.toString()},t))(e)}function _toConsumableArray(e){return _arrayWithoutHoles(e)||_iterableToArray(e)||_nonIterableSpread()}function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance")}function _iterableToArray(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}function _arrayWithoutHoles(e){if(Array.isArray(e)){for(var t=0,n=new Array(e.length);t<e.length;t++)n[t]=e[t];return n}}!function(n){var r={};function i(e){if(r[e])return r[e].exports;var t=r[e]={exports:{},id:e,loaded:!1};return n[e].call(t.exports,t,t.exports,i),t.loaded=!0,t.exports}i.m=n,i.c=r,i.p="",i(0)}([function(e,t,n){n(1);var r=n(2),i=n(3),o=n(4),a=n(5),s=n(6),c=n(7),l=n(8),u=n(9),d=n(10),f=n(11),p=n(13),g=[i(),o(),a(),s(".delayed, .bullet"),c(),l(),u(),d(),f(),p()];try{n(!function(){var e=new Error('Cannot find module "plugins"');throw e.code="MODULE_NOT_FOUND",e}())(g)}catch(e){}var h=r.from("article",g);try{n(14)(h)}catch(e){}},function(t,e){(function(e){var l=function(l){var u=/\blang(?:uage)?-([\w-]+)\b/i,t=0,C={manual:l.Prism&&l.Prism.manual,disableWorkerMessageHandler:l.Prism&&l.Prism.disableWorkerMessageHandler,util:{encode:function(e){return e instanceof L?new L(e.type,C.util.encode(e.content),e.alias):Array.isArray(e)?e.map(C.util.encode):e.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/\u00a0/g," ")},type:function(e){return Object.prototype.toString.call(e).slice(8,-1)},objId:function(e){return e.__id||Object.defineProperty(e,"__id",{value:++t}),e.__id},clone:function n(e,r){var i,t,o=C.util.type(e);switch(r=r||{},o){case"Object":if(t=C.util.objId(e),r[t])return r[t];for(var a in i={},r[t]=i,e)e.hasOwnProperty(a)&&(i[a]=n(e[a],r));return i;case"Array":return t=C.util.objId(e),r[t]?r[t]:(i=[],r[t]=i,e.forEach(function(e,t){i[t]=n(e,r)}),i);default:return e}}},languages:{extend:function(e,t){var n=C.util.clone(C.languages[e]);for(var r in t)n[r]=t[r];return n},insertBefore:function(n,e,t,r){var i=(r=r||C.languages)[n],o={};for(var a in i)if(i.hasOwnProperty(a)){if(a==e)for(var s in t)t.hasOwnProperty(s)&&(o[s]=t[s]);t.hasOwnProperty(a)||(o[a]=i[a])}var c=r[n];return r[n]=o,C.languages.DFS(C.languages,function(e,t){t===c&&e!=n&&(this[e]=o)}),o},DFS:function e(t,n,r,i){i=i||{};var o=C.util.objId;for(var a in t)if(t.hasOwnProperty(a)){n.call(t,a,t[a],r||a);var s=t[a],c=C.util.type(s);"Object"!==c||i[o(s)]?"Array"!==c||i[o(s)]||(i[o(s)]=!0,e(s,n,a,i)):(i[o(s)]=!0,e(s,n,null,i))}}},plugins:{},highlightAll:function(e,t){C.highlightAllUnder(document,e,t)},highlightAllUnder:function(e,t,n){var r={callback:n,selector:'code[class*="language-"], [class*="language-"] code, code[class*="lang-"], [class*="lang-"] code'};C.hooks.run("before-highlightall",r);for(var i,o=r.elements||e.querySelectorAll(r.selector),a=0;i=o[a++];)C.highlightElement(i,!0===t,r.callback)},highlightElement:function(e,t,n){for(var r,i,o=e;o&&!u.test(o.className);)o=o.parentNode;o&&(r=(o.className.match(u)||[,""])[1].toLowerCase(),i=C.languages[r]),e.className=e.className.replace(u,"").replace(/\s+/g," ")+" language-"+r,e.parentNode&&(o=e.parentNode,/pre/i.test(o.nodeName)&&(o.className=o.className.replace(u,"").replace(/\s+/g," ")+" language-"+r));function a(e){s.highlightedCode=e,C.hooks.run("before-insert",s),s.element.innerHTML=s.highlightedCode,C.hooks.run("after-highlight",s),C.hooks.run("complete",s),n&&n.call(s.element)}var s={element:e,language:r,grammar:i,code:e.textContent};if(C.hooks.run("before-sanity-check",s),s.code)if(C.hooks.run("before-highlight",s),s.grammar)if(t&&l.Worker){var c=new Worker(C.filename);c.onmessage=function(e){a(e.data)},c.postMessage(JSON.stringify({language:s.language,code:s.code,immediateClose:!0}))}else a(C.highlight(s.code,s.grammar,s.language));else a(C.util.encode(s.code));else C.hooks.run("complete",s)},highlight:function(e,t,n){var r={code:e,grammar:t,language:n};return C.hooks.run("before-tokenize",r),r.tokens=C.tokenize(r.code,r.grammar),C.hooks.run("after-tokenize",r),L.stringify(C.util.encode(r.tokens),r.language)},matchGrammar:function(e,t,n,r,i,o,a){for(var s in n)if(n.hasOwnProperty(s)&&n[s]){if(s==a)return;var c=n[s];c="Array"===C.util.type(c)?c:[c];for(var l=0;l<c.length;++l){var u=c[l],d=u.inside,f=!!u.lookbehind,p=!!u.greedy,g=0,h=u.alias;if(p&&!u.pattern.global){var m=u.pattern.toString().match(/[imuy]*$/)[0];u.pattern=RegExp(u.pattern.source,m+"g")}u=u.pattern||u;for(var v=r,b=i;v<t.length;b+=t[v].length,++v){var y=t[v];if(t.length>e.length)return;if(!(y instanceof L)){if(p&&v!=t.length-1){if(u.lastIndex=b,!(j=u.exec(e)))break;for(var w=j.index+(f?j[1].length:0),k=j.index+j[0].length,x=v,E=b,A=t.length;x<A&&(E<k||!t[x].type&&!t[x-1].greedy);++x)(E+=t[x].length)<=w&&(++v,b=E);if(t[v]instanceof L)continue;S=x-v,y=e.slice(b,E),j.index-=b}else{u.lastIndex=0;var j=u.exec(y),S=1}if(j){f&&(g=j[1]?j[1].length:0);k=(w=j.index+g)+(j=j[0].slice(g)).length;var O=y.slice(0,w),N=y.slice(k),F=[v,S];O&&(++v,b+=O.length,F.push(O));var _=new L(s,d?C.tokenize(j,d):j,h,j,p);if(F.push(_),N&&F.push(N),Array.prototype.splice.apply(t,F),1!=S&&C.matchGrammar(e,t,n,v,b,!0,s),o)break}else if(o)break}}}}},tokenize:function(e,t){var n=[e],r=t.rest;if(r){for(var i in r)t[i]=r[i];delete t.rest}return C.matchGrammar(e,n,t,0,0,!1),n},hooks:{all:{},add:function(e,t){var n=C.hooks.all;n[e]=n[e]||[],n[e].push(t)},run:function(e,t){var n=C.hooks.all[e];if(n&&n.length)for(var r,i=0;r=n[i++];)r(t)}},Token:L};function L(e,t,n,r,i){this.type=e,this.content=t,this.alias=n,this.length=0|(r||"").length,this.greedy=!!i}if(l.Prism=C,L.stringify=function(t,n,e){if("string"==typeof t)return t;if(Array.isArray(t))return t.map(function(e){return L.stringify(e,n,t)}).join("");var r={type:t.type,content:L.stringify(t.content,n,e),tag:"span",classes:["token",t.type],attributes:{},language:n,parent:e};if(t.alias){var i=Array.isArray(t.alias)?t.alias:[t.alias];Array.prototype.push.apply(r.classes,i)}C.hooks.run("wrap",r);var o=Object.keys(r.attributes).map(function(e){return e+'="'+(r.attributes[e]||"").replace(/"/g,"&quot;")+'"'}).join(" ");return"<"+r.tag+' class="'+r.classes.join(" ")+'"'+(o?" "+o:"")+">"+r.content+"</"+r.tag+">"},!l.document)return l.addEventListener&&(C.disableWorkerMessageHandler||l.addEventListener("message",function(e){var t=JSON.parse(e.data),n=t.language,r=t.code,i=t.immediateClose;l.postMessage(C.highlight(r,C.languages[n],n)),i&&l.close()},!1)),C;var e=document.currentScript||[].slice.call(document.getElementsByTagName("script")).pop();return e&&(C.filename=e.src,C.manual||e.hasAttribute("data-manual")||("loading"!==document.readyState?window.requestAnimationFrame?window.requestAnimationFrame(C.highlightAll):window.setTimeout(C.highlightAll,16):document.addEventListener("DOMContentLoaded",C.highlightAll))),C}("undefined"!=typeof window?window:"undefined"!=typeof WorkerGlobalScope&&self instanceof WorkerGlobalScope?self:{});void 0!==t&&t.exports&&(t.exports=l),void 0!==e&&(e.Prism=l),l.languages.markup={comment:/<!--[\s\S]*?-->/,prolog:/<\?[\s\S]+?\?>/,doctype:/<!DOCTYPE[\s\S]+?>/i,cdata:/<!\[CDATA\[[\s\S]*?]]>/i,tag:{pattern:/<\/?(?!\d)[^\s>\/=$<%]+(?:\s(?:\s*[^\s>\/=]+(?:\s*=\s*(?:"[^"]*"|'[^']*'|[^\s'">=]+(?=[\s>]))|(?=[\s/>])))+)?\s*\/?>/i,greedy:!0,inside:{tag:{pattern:/^<\/?[^\s>\/]+/i,inside:{punctuation:/^<\/?/,namespace:/^[^\s>\/:]+:/}},"attr-value":{pattern:/=\s*(?:"[^"]*"|'[^']*'|[^\s'">=]+)/i,inside:{punctuation:[/^=/,{pattern:/^(\s*)["']|["']$/,lookbehind:!0}]}},punctuation:/\/?>/,"attr-name":{pattern:/[^\s>\/]+/,inside:{namespace:/^[^\s>\/:]+:/}}}},entity:/&#?[\da-z]{1,8};/i},l.languages.markup.tag.inside["attr-value"].inside.entity=l.languages.markup.entity,l.hooks.add("wrap",function(e){"entity"===e.type&&(e.attributes.title=e.content.replace(/&amp;/,"&"))}),Object.defineProperty(l.languages.markup.tag,"addInlined",{value:function(e,t){var n={};n["language-"+t]={pattern:/(^<!\[CDATA\[)[\s\S]+?(?=\]\]>$)/i,lookbehind:!0,inside:l.languages[t]},n.cdata=/^<!\[CDATA\[|\]\]>$/i;var r={"included-cdata":{pattern:/<!\[CDATA\[[\s\S]*?\]\]>/i,inside:n}};r["language-"+t]={pattern:/[\s\S]+/,inside:l.languages[t]};var i={};i[e]={pattern:RegExp(/(<__[\s\S]*?>)(?:<!\[CDATA\[[\s\S]*?\]\]>\s*|[\s\S])*?(?=<\/__>)/.source.replace(/__/g,e),"i"),lookbehind:!0,greedy:!0,inside:r},l.languages.insertBefore("markup","cdata",i)}}),l.languages.xml=l.languages.extend("markup",{}),l.languages.html=l.languages.markup,l.languages.mathml=l.languages.markup,l.languages.svg=l.languages.markup,function(e){var t=/("|')(?:\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1/;e.languages.css={comment:/\/\*[\s\S]*?\*\//,atrule:{pattern:/@[\w-]+?[\s\S]*?(?:;|(?=\s*\{))/i,inside:{rule:/@[\w-]+/}},url:RegExp("url\\((?:"+t.source+"|.*?)\\)","i"),selector:RegExp("[^{}\\s](?:[^{};\"']|"+t.source+")*?(?=\\s*\\{)"),string:{pattern:t,greedy:!0},property:/[-_a-z\xA0-\uFFFF][-\w\xA0-\uFFFF]*(?=\s*:)/i,important:/!important\b/i,function:/[-a-z0-9]+(?=\()/i,punctuation:/[(){};:,]/},e.languages.css.atrule.inside.rest=e.languages.css;var n=e.languages.markup;n&&(n.tag.addInlined("style","css"),e.languages.insertBefore("inside","attr-value",{"style-attr":{pattern:/\s*style=("|')(?:\\[\s\S]|(?!\1)[^\\])*\1/i,inside:{"attr-name":{pattern:/^\s*style/i,inside:n.tag.inside},punctuation:/^\s*=\s*['"]|['"]\s*$/,"attr-value":{pattern:/.+/i,inside:e.languages.css}},alias:"language-css"}},n.tag))}(l),l.languages.clike={comment:[{pattern:/(^|[^\\])\/\*[\s\S]*?(?:\*\/|$)/,lookbehind:!0},{pattern:/(^|[^\\:])\/\/.*/,lookbehind:!0,greedy:!0}],string:{pattern:/(["'])(?:\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1/,greedy:!0},"class-name":{pattern:/((?:\b(?:class|interface|extends|implements|trait|instanceof|new)\s+)|(?:catch\s+\())[\w.\\]+/i,lookbehind:!0,inside:{punctuation:/[.\\]/}},keyword:/\b(?:if|else|while|do|for|return|in|instanceof|function|new|try|throw|catch|finally|null|break|continue)\b/,boolean:/\b(?:true|false)\b/,function:/\w+(?=\()/,number:/\b0x[\da-f]+\b|(?:\b\d+\.?\d*|\B\.\d+)(?:e[+-]?\d+)?/i,operator:/--?|\+\+?|!=?=?|<=?|>=?|==?=?|&&?|\|\|?|\?|\*|\/|~|\^|%/,punctuation:/[{}[\];(),.:]/},l.languages.javascript=l.languages.extend("clike",{"class-name":[l.languages.clike["class-name"],{pattern:/(^|[^$\w\xA0-\uFFFF])[_$A-Z\xA0-\uFFFF][$\w\xA0-\uFFFF]*(?=\.(?:prototype|constructor))/,lookbehind:!0}],keyword:[{pattern:/((?:^|})\s*)(?:catch|finally)\b/,lookbehind:!0},{pattern:/(^|[^.])\b(?:as|async(?=\s*(?:function\b|\(|[$\w\xA0-\uFFFF]|$))|await|break|case|class|const|continue|debugger|default|delete|do|else|enum|export|extends|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)\b/,lookbehind:!0}],number:/\b(?:(?:0[xX][\dA-Fa-f]+|0[bB][01]+|0[oO][0-7]+)n?|\d+n|NaN|Infinity)\b|(?:\b\d+\.?\d*|\B\.\d+)(?:[Ee][+-]?\d+)?/,function:/[_$a-zA-Z\xA0-\uFFFF][$\w\xA0-\uFFFF]*(?=\s*(?:\.\s*(?:apply|bind|call)\s*)?\()/,operator:/-[-=]?|\+[+=]?|!=?=?|<<?=?|>>?>?=?|=(?:==?|>)?|&[&=]?|\|[|=]?|\*\*?=?|\/=?|~|\^=?|%=?|\?|\.{3}/}),l.languages.javascript["class-name"][0].pattern=/(\b(?:class|interface|extends|implements|instanceof|new)\s+)[\w.\\]+/,l.languages.insertBefore("javascript","keyword",{regex:{pattern:/((?:^|[^$\w\xA0-\uFFFF."'\])\s])\s*)\/(\[(?:[^\]\\\r\n]|\\.)*]|\\.|[^/\\\[\r\n])+\/[gimyu]{0,5}(?=\s*($|[\r\n,.;})\]]))/,lookbehind:!0,greedy:!0},"function-variable":{pattern:/[_$a-zA-Z\xA0-\uFFFF][$\w\xA0-\uFFFF]*(?=\s*[=:]\s*(?:async\s*)?(?:\bfunction\b|(?:\((?:[^()]|\([^()]*\))*\)|[_$a-zA-Z\xA0-\uFFFF][$\w\xA0-\uFFFF]*)\s*=>))/,alias:"function"},parameter:[{pattern:/(function(?:\s+[_$A-Za-z\xA0-\uFFFF][$\w\xA0-\uFFFF]*)?\s*\(\s*)(?!\s)(?:[^()]|\([^()]*\))+?(?=\s*\))/,lookbehind:!0,inside:l.languages.javascript},{pattern:/[_$a-z\xA0-\uFFFF][$\w\xA0-\uFFFF]*(?=\s*=>)/i,inside:l.languages.javascript},{pattern:/(\(\s*)(?!\s)(?:[^()]|\([^()]*\))+?(?=\s*\)\s*=>)/,lookbehind:!0,inside:l.languages.javascript},{pattern:/((?:\b|\s|^)(?!(?:as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)(?![$\w\xA0-\uFFFF]))(?:[_$A-Za-z\xA0-\uFFFF][$\w\xA0-\uFFFF]*\s*)\(\s*)(?!\s)(?:[^()]|\([^()]*\))+?(?=\s*\)\s*\{)/,lookbehind:!0,inside:l.languages.javascript}],constant:/\b[A-Z](?:[A-Z_]|\dx?)*\b/}),l.languages.insertBefore("javascript","string",{"template-string":{pattern:/`(?:\\[\s\S]|\${[^}]+}|[^\\`])*`/,greedy:!0,inside:{interpolation:{pattern:/\${[^}]+}/,inside:{"interpolation-punctuation":{pattern:/^\${|}$/,alias:"punctuation"},rest:l.languages.javascript}},string:/[\s\S]+/}}}),l.languages.markup&&l.languages.markup.tag.addInlined("script","javascript"),l.languages.js=l.languages.javascript,"undefined"!=typeof self&&self.Prism&&self.document&&document.querySelector&&(self.Prism.fileHighlight=function(e){e=e||document;var c={js:"javascript",py:"python",rb:"ruby",ps1:"powershell",psm1:"powershell",sh:"bash",bat:"batch",h:"c",tex:"latex"};Array.prototype.slice.call(e.querySelectorAll("pre[data-src]")).forEach(function(e){if(!e.hasAttribute("data-src-loaded")){for(var t,n=e.getAttribute("data-src"),r=e,i=/\blang(?:uage)?-([\w-]+)\b/i;r&&!i.test(r.className);)r=r.parentNode;if(r&&(t=(e.className.match(i)||[,""])[1]),!t){var o=(n.match(/\.(\w+)$/)||[,""])[1];t=c[o]||o}var a=document.createElement("code");a.className="language-"+t,e.textContent="",a.textContent="Loading…",e.appendChild(a);var s=new XMLHttpRequest;s.open("GET",n,!0),s.onreadystatechange=function(){4==s.readyState&&(s.status<400&&s.responseText?(a.textContent=s.responseText,l.highlightElement(a),e.setAttribute("data-src-loaded","")):400<=s.status?a.textContent="✖ Error "+s.status+" while fetching file: "+s.statusText:a.textContent="✖ Error: File does not exist or is empty")},s.send(null)}}),l.plugins.toolbar&&l.plugins.toolbar.registerButton("download-file",function(e){var t=e.element.parentNode;if(t&&/pre/i.test(t.nodeName)&&t.hasAttribute("data-src")&&t.hasAttribute("data-download-link")){var n=t.getAttribute("data-src"),r=document.createElement("a");return r.textContent=t.getAttribute("data-download-link-label")||"Download",r.setAttribute("download",""),r.href=n,r}})},document.addEventListener("DOMContentLoaded",function(){self.Prism.fileHighlight()}))}).call(e,function(){return this}())},function(e,t){e.exports={from:function(e,t){function r(e,t){o[e]&&(l("deactivate",u(a,t)),a=o[e],l("activate",u(a,t)))}function n(e,t){var n=o.indexOf(a)+e;l(0<e?"next":"prev",u(a,t))&&r(n,t)}var i=1===(e.parent||e).nodeType?e.parent||e:document.querySelector(e.parent||e),o=[].filter.call("string"==typeof e.slides?i.querySelectorAll(e.slides):e.slides||i.children,function(e){return"SCRIPT"!==e.nodeName}),a=o[0],s={},c=function(e,t){s[e]=(s[e]||[]).filter(function(e){return e!==t})},l=function(e,n){return(s[e]||[]).reduce(function(e,t){return e&&!1!==t(n)},!0)},u=function(e,t){return(t=t||{}).index=o.indexOf(e),t.slide=e,t},d={on:function(e,t){return(s[e]||(s[e]=[])).push(t),c.bind(null,e,t)},off:c,fire:l,slide:function(e,t){if(!arguments.length)return o.indexOf(a);l("slide",u(o[e],t))&&r(e,t)},next:n.bind(null,1),prev:n.bind(null,-1),parent:i,slides:o};return(t||[]).forEach(function(e){e(d)}),r(0),d}}},function(e,t,n){var r;r=function(){return function r(i,o,a){function s(n,e){if(!o[n]){if(!i[n]){if(c)return c(n,!0);throw new Error("Cannot find module '"+n+"'")}var t=o[n]={exports:{}};i[n][0].call(t.exports,function(e){var t=i[n][1][e];return s(t||e)},t,t.exports,r,i,o,a)}return o[n].exports}for(var c=!1,e=0;e<a.length;e++)s(a[e]);return s}({1:[function(e,t,n){var r=e("bespoke-classes"),i=e("insert-css");t.exports=function(){return i('/*! normalize.css v3.0.0 | MIT License | git.io/normalize */html{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:0}article,aside,details,figcaption,figure,footer,header,hgroup,main,nav,section,summary{display:block}audio,canvas,progress,video{display:inline-block;vertical-align:baseline}audio:not([controls]){display:none;height:0}[hidden],template{display:none}a{background:0 0}a:active,a:hover{outline:0}abbr[title]{border-bottom:1px dotted}b{font-weight:700}dfn{font-style:italic}h1{font-size:2em}mark{background:#ff0;color:#000}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sup{top:-.5em}sub{bottom:-.25em}img{border:0}svg:not(:root){overflow:hidden}figure{margin:1em 40px}hr{box-sizing:content-box}pre{overflow:auto}code,kbd,pre,samp{font-size:1em}kbd,pre,samp{font-family:monospace,monospace}button,input,optgroup,select,textarea{color:inherit;font:inherit;margin:0}button{overflow:visible}button,select{text-transform:none}button,html input[type="button"],input[type="reset"],input[type="submit"]{-webkit-appearance:button;cursor:pointer}button[disabled],html input[disabled]{cursor:default}button::-moz-focus-inner,input::-moz-focus-inner{border:0;padding:0}input{line-height:normal}input[type="checkbox"],input[type="radio"]{box-sizing:border-box;padding:0}input[type="number"]::-webkit-inner-spin-button,input[type="number"]::-webkit-outer-spin-button{height:auto}input[type="search"]{-webkit-appearance:textfield;box-sizing:content-box}input[type="search"]::-webkit-search-cancel-button,input[type="search"]::-webkit-search-decoration{-webkit-appearance:none}fieldset{border:1px solid silver;margin:0 2px;padding:.35em .625em .75em}legend{border:0;padding:0}textarea{overflow:auto}optgroup{font-weight:700}table{border-collapse:collapse;border-spacing:0}td,th,*{padding:0}*{margin:0}html{-webkit-text-size-adjust:auto;-ms-text-size-adjust:auto;text-size-adjust:auto}.bespoke-parent{font-size:1.5em;background:#111;color:#ddd;font-family:futura,helvetica,arial,arial,sans-serif;overflow:hidden;text-align:center;-webkit-transition:background 1s ease;transition:background 1s ease;background-position:50% 50%}.bespoke-parent,.bespoke-scale-parent{position:absolute;top:0;left:0;right:0;bottom:0}.bespoke-scale-parent{pointer-events:none;z-index:1}.bespoke-scale-parent .bespoke-active{pointer-events:auto}.bespoke-slide{-webkit-transition:opacity .5s ease;transition:opacity .5s ease;width:940px;height:480px;position:absolute;top:50%;left:50%;margin-left:-470px;margin-top:-240px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-box-align:center;-webkit-align-items:center;-ms-flex-align:center;align-items:center;z-index:1}.bespoke-active{-webkit-transition-delay:.5s;transition-delay:.5s}.bespoke-active[data-bespoke-backdrop]{-webkit-transition-delay:.75s;transition-delay:.75s}.bespoke-inactive{opacity:0;pointer-events:none}.bespoke-backdrop{-webkit-transition:opacity 1s ease;position:absolute;top:0;left:0;right:0;bottom:0}.bespoke-progress-parent{position:absolute;top:0;left:0;right:0;height:.3vw;z-index:1}.bespoke-progress-bar{background:#ddd;position:absolute;top:0;left:0;height:100%;-webkit-transition:width 1s ease;transition:width 1s ease}.bespoke-bullet{-webkit-transition:opacity .3s ease;transition:opacity .3s ease}.bespoke-bullet-inactive{opacity:0}strong{font-weight:400}hr{width:50%;margin:1rem auto;height:1px;border:0;background:#ddd}h3,p,li{padding-left:20px;padding-right:20px}h3,h4,p,li,pre{font-weight:200}h1{line-height:1.4em;padding:1em;border:1px solid #ddd;border-left-width:0;border-right-width:0;min-width:8em}h1,h2{letter-spacing:.3em;text-transform:uppercase;font-weight:400;margin:.17em 0;position:relative}h2{line-height:1.1em;padding:0 0 0 .3em}h3{font-family:didot,times new roman,serif;font-style:italic;font-size:1.2em;line-height:1.6em;margin:.5em 0}h4{text-transform:uppercase;font-size:.8em;line-height:1.8em;letter-spacing:.3em;margin:1em 0}ul,ol{padding:0;margin:0;text-align:left}li{list-style:none;margin:.2em;font-style:normal;-webkit-transform:translateX(-6px);-ms-transform:translateX(-6px);transform:translateX(-6px)}li:before{content:\'\\2014\';margin-right:4px}pre{background:none!important}code{font-family:prestige elite std,consolas,courier new,monospace!important;font-style:normal;font-weight:200!important;text-align:left}a{padding-left:.3em;color:currentColor;text-decoration:none;border-bottom:1px solid currentColor}.emphatic{background:#f30}.single-words{word-spacing:9999px;line-height:2.9em;overflow:hidden}.bespoke-backdrop{opacity:0;-webkit-transition:opacity 1s ease,-webkit-transform 6s ease;transition:opacity 1s ease,transform 6s ease;background-size:cover;background-position:50% 50%;-webkit-transform:translateZ(0)scale(1.3);transform:translateZ(0)scale(1.3)}.bespoke-backdrop-active,.bespoke-backdrop-before{-webkit-transform:translateZ(0);transform:translateZ(0)}.bespoke-backdrop-before{-webkit-transition-delay:.2s;transition-delay:.2s}.bespoke-backdrop-active{opacity:.5}',{prepend:!0}),function(e){r()(e)}}},{"bespoke-classes":2,"insert-css":3}],2:[function(e,t,n){t.exports=function(){return function(o){function a(e,t){e.classList.add("bespoke-"+t)}function s(e,t){e.className=e.className.replace(new RegExp("bespoke-"+t+"(\\s|$)","g")," ").trim()}function t(e,t){var n=o.slides[o.slide()],r=t-o.slide(),i=0<r?"after":"before";["before(-\\d+)?","after(-\\d+)?","active","inactive"].map(s.bind(null,e)),e!==n&&["inactive",i,i+"-"+Math.abs(r)].map(a.bind(null,e))}a(o.parent,"parent"),o.slides.map(function(e){a(e,"slide")}),o.on("activate",function(e){o.slides.map(t),a(e.slide,"active"),s(e.slide,"inactive")})}}},{}],3:[function(e,t,n){var i={};t.exports=function(e,t){if(!i[e]){i[e]=!0;var n=document.createElement("style");n.setAttribute("type","text/css"),"textContent"in n?n.textContent=e:n.styleSheet.cssText=e;var r=document.getElementsByTagName("head")[0];t&&t.prepend?r.insertBefore(n,r.childNodes[0]):r.appendChild(n)}}},{}]},{},[1])(1)},e.exports=r()},function(e,t){e.exports=function(e){return function(t){var n="vertical"!==e;document.addEventListener("keydown",function(e){(34==e.which||32==e.which&&!e.shiftKey||n&&39==e.which||!n&&40==e.which)&&t.next(),(33==e.which||32==e.which&&e.shiftKey||n&&37==e.which||!n&&38==e.which)&&t.prev()})}}},function(e,t){e.exports=function(i){return function(e){var t,n,r="vertical"==i?"Y":"X";e.parent.addEventListener("touchstart",function(e){1==e.touches.length&&(t=e.touches[0]["page"+r],n=0)}),e.parent.addEventListener("touchmove",function(e){1==e.touches.length&&(e.preventDefault(),n=e.touches[0]["page"+r]-t)}),e.parent.addEventListener("touchend",function(){50<Math.abs(n)&&e[0<n?"prev":"next"]()})}}},function(e,t){e.exports=function(a){return function(e){var t,n,o=e.slides.map(function(e){return[].slice.call(e.querySelectorAll("string"==typeof a?a:"[data-bespoke-bullet]"),0)}),r=function(r,i){t=r,n=i,o.forEach(function(e,n){e.forEach(function(e,t){e.classList.add("bespoke-bullet"),n<r||n===r&&t<=i?(e.classList.add("bespoke-bullet-active"),e.classList.remove("bespoke-bullet-inactive")):(e.classList.add("bespoke-bullet-inactive"),e.classList.remove("bespoke-bullet-active")),n===r&&t===i?e.classList.add("bespoke-bullet-current"):e.classList.remove("bespoke-bullet-current")})})},i=function(e){return void 0!==o[t][n+e]};e.on("next",function(){var e=t+1;if(i(1))return r(t,n+1),!1;o[e]&&r(e,0)}),e.on("prev",function(){var e=t-1;if(i(-1))return r(t,n-1),!1;o[e]&&r(e,o[e].length-1)}),e.on("slide",function(e){r(e.index,0)}),r(0,0)}}},function(e,t){e.exports=function(){return function(r){var i;function e(e){if(e){var t=i.indexOf(e),n=r.slide();o(e,"active"),o(e,"inactive"),o(e,"before"),o(e,"after"),t!==n?(a(e,"inactive"),a(e,t<n?"before":"after")):a(e,"active")}}function o(e,t){e.classList.remove("bespoke-backdrop-"+t)}function a(e,t){e.classList.add("bespoke-backdrop-"+t)}i=r.slides.map(function(e){var t=e.getAttribute("data-bespoke-backdrop");if(t){var n=document.createElement("div");return n.className=t,n.classList.add("bespoke-backdrop"),r.parent.appendChild(n),n}}),r.on("activate",function(){i.forEach(e)})}}},function(e,t){e.exports=function(d){return function(e){function t(){var e=r.offsetWidth/a,t=r.offsetHeight/o;c.forEach(u.bind(null,Math.min(e,t)))}var n,r=e.parent,i=e.slides[0],o=i.offsetHeight,a=i.offsetWidth,s="zoom"===d||"zoom"in r.style&&"transform"!==d,c=s?e.slides:e.slides.map(function(e){var t=document.createElement("div");return t.className="bespoke-scale-parent",e.parentNode.insertBefore(t,e),t.appendChild(e),t}),l=(n="Transform","Moz Webkit O ms".split(" ").reduce(function(e,t){return t+n in r.style?t+n:e},n.toLowerCase())),u=s?function(e,t){t.style.zoom=e}:function(e,t){t.style[l]="scale("+e+")"};window.addEventListener("resize",t),t()}}},function(e,t){e.exports=function(){return function(r){function i(e){var t=-1<e&&e<r.slides.length?e:0;t!==r.slide()&&r.slide(t)}function e(){var n=window.location.hash.slice(1),e=parseInt(n,10);n&&(e?i(e-1):r.slides.forEach(function(e,t){e.getAttribute("data-bespoke-hash")!==n&&e.id!==n||i(t)}))}setTimeout(function(){e(),r.on("activate",function(e){var t=e.slide.getAttribute("data-bespoke-hash")||e.slide.id;window.location.hash=t||e.index+1}),window.addEventListener("hashchange",e)},0)}}},function(e,t){e.exports=function(i){return function(t){var e=document.createElement("div"),n=document.createElement("div"),r="vertical"===i?"height":"width";e.className="bespoke-progress-parent",n.className="bespoke-progress-bar",e.appendChild(n),t.parent.appendChild(e),t.on("activate",function(e){n.style[r]=100*e.index/(t.slides.length-1)+"%"})}}},function(e,t,n){var r=Function("return this")(),o=(r.bespoke&&r.bespoke.plugins&&r.bespoke.plugins.convenient||n(12)).builder("indexfinger");e.exports=function(e){return function(e){o.activateDeck(e);var t={},n=null,r=-1,i={enableActiveSlideListener:function(){t.saveActiveSlide=this.on("activate",i.saveActiveSlide.bind(this))},saveActiveSlide:function(e){n=e.slide,r=e.index},getActiveSlide:function(){return n},getActiveSlideIndex:function(){return r}};e.getActiveSlide=i.getActiveSlide.bind(e),e.getActiveSlideIndex=i.getActiveSlideIndex.bind(e),i.enableActiveSlideListener.call(e)}}},function(e,t){function c(e){!function(t){if(!t)throw l.generateErrorObject("deck must be defined.");return i.some(function(e){return e.deck===t})}(e)&&i.push({deck:e,storage:{}})}var l,n,u=Function("return this")(),r={logger:{log:function(){console.log.apply(console,arguments)}}},d={},i=[];d.builder=function(t){if(!t)throw l.generateErrorObject("The plugin options were not properly defined.");if("string"==typeof t&&(t={pluginName:t}),"string"!=typeof t.pluginName)throw l.generateErrorObject("The plugin name was not properly defined.");function o(e,t,n,r,i,o){return d.createEventData.call(e,t,n,r,i,o)}function e(e,t,n,r,i){return e.fire(function(e){return s+"."+e}(t),o(e,s,t,n,r,i))}function n(e){if(function(e,t){if(!e)throw l.generateErrorObject("pluginName must be defined.");if(!t)throw l.generateErrorObject("deck must be defined.");var n=d.getDeckStorage(t);return!(!n||!n[e])}(t.pluginName,e))throw l.generateErrorObject("The '"+t.pluginName+"' plugin has already been activated for this deck, can't activate it twice.")}function r(e){return n(e),function(e,t){if(!e)throw l.generateErrorObject("pluginName must be defined.");if(!t)throw l.generateErrorObject("deck must be defined.");var n=d.getDeckStorage(t);n||(c(t),n=d.getDeckStorage(t)),n[e]={}}(t.pluginName,e),function(e){var t={};return t.createEventData=i.createEventData.bind(this,e),t.fire=i.fire.bind(this,e),t.getStorage=i.getStorage.bind(this,e),t.log=i.log.bind(this,e),t}(e)}var i={},a="bespoke."+t.pluginName,s=t.pluginName;return function(){i.createEventData=o.bind(this),i.generateErrorObject=function(e){return new Error(a+": "+e)}.bind(this),i.fire=e.bind(this),i.log=function(){var e=[a];u.convenientOptions.logger.log.apply(u.convenientOptions.logger.log,e.concat(d.copyArray(arguments)))}.bind(this),i.activateDeck=r.bind(this),i.getStorage=d.getDeckPluginStorage.bind(this,t.pluginName)}(),i},d.getDeckStorage=function(t){if(!t)throw l.generateErrorObject("deck must be defined.");var n=null;return i.some(function(e){return e.deck===t&&(n=e.storage,!0)}),n},d.getDeckPluginStorage=function(e,t){if(!e)throw l.generateErrorObject("pluginName must be defined.");if(!t)throw l.generateErrorObject("deck must be defined.");var n=d.getDeckStorage(t);if(!n)throw l.generateErrorObject("storage was not initiated for this deck.");return n[e]},d.createEventData=function(e,t,n,r,i){return(i=i||{}).eventNamespace=e||null,i.eventName=t||null,i.innerEvent=n||null,!function(e){return!isNaN(parseFloat(e))&&isFinite(e)}(r)?(i.index=this.slides.indexOf(r),i.slide=r):(i.index=r,i.slide=this.slides[r]),i},d.copyArray=function(e){return[].slice.call(e,0)},l=d.builder("convenient"),(n={logger:{}}).logger.log=u.convenientOptions&&u.convenientOptions.logger&&u.convenientOptions.logger.log||r.logger.log,u.convenientOptions=n,e.exports=d},function(e,t,n){function l(){return"secondary-window-"+function(e,t){var n;return void 0===t&&(t=e,e=0),n=t-e,e+Math.floor(Math.random()*n)}(1e3,1e4)}var r="secondary",i=Function("return this")(),u=i.bespoke&&i.bespoke.plugins&&i.bespoke.plugins.convenient||n(12),d=u.builder(r),f=(i.bespoke&&i.bespoke.plugins&&i.bespoke.plugins.indexfinger||n(11),{notes:"aside",keys:{toggle:83}});e.exports=function(c){return function(n){function e(e){var t=!1;return e.altKey||e.ctrlKey||e.metaKey||e.shiftKey||(t=t||e.which===c.keys.toggle&&o.fire("toggle",e)&&n.secondary.toggle()&&n.secondary.synchronize()),t&&e.preventDefault(),!t}function t(){return n.secondary.close(),null}function r(){n.secondary.synchronize()}var i,o=d.activateDeck(n),a={},s={getNotesElement:function(){return this.secondary.window&&this.secondary.window.document&&this.secondary.window.document.getElementById("notes")},isOpen:function(){var e=this.secondary,t=e.window;return!(void 0===e||null===t||!0===t.closed||t.opener!==window||null===this.secondary.getNotesElement())},open:function(){return this.secondary.isOpen()||(this.secondary.window=window.open(),function(e){e.body.innerHTML="<h1>Notes</h1><div id='notes'></div>"}(this.secondary.window.document)),this.secondary.isOpen()},close:function(){return this.secondary.isOpen()&&this.secondary.window.close(),!this.secondary.isOpen()},focus:function(){return this.secondary.isOpen()&&this.secondary.window.focus(),this.secondary.isOpen()},toggle:function(){return this.secondary.isOpen()?this.secondary.close():this.secondary.open(),this.secondary.isOpen()},synchronize:function(){var e,t,n;return!!this.secondary.isOpen()&&(e=this.secondary.getNotesElement(),t=this.getActiveSlide(),n=u.copyArray(t.querySelectorAll(c.notes)).reduce(function(e,t){return e+t.outerHTML},""),e.innerHTML=n,this.secondary.isOpen())}};c=c||{},(i={}).keys={},i.keys.toggle=c.keys&&c.keys.toggle||f.keys.toggle,i.notes=c.notes||f.notes,c=i,n.secondary={window:null,secondaryWindowName:l(),getNotesElement:s.getNotesElement.bind(n),isOpen:s.isOpen.bind(n),open:s.open.bind(n),close:s.close.bind(n),focus:s.focus.bind(n),toggle:s.toggle.bind(n),synchronize:s.synchronize.bind(n)},window.onbeforeunload=t,document.addEventListener("keydown",e,!1),a.activate=n.on("activate",r)}}},function(e,t,n){var r=n(15),o=n(16),a=n(28),s={ls:n(32),pwd:n(33),mkdir:n(34),touch:n(35),cat:n(36),cd:n(37),rm:n(38),clear:n(39),theme:n(40),version:n(41),npm:n(42),"ipfs-npm":n(45)};s.help={handler:function(e,t){return"Commands: "+Object.keys(s).sort(function(e,t){return e.localeCompare(t)})+'<br>More help available <a class="external" href="http://github.com/sasadjolic/dom-terminal" target="_blank">here</a>'}},e.exports=function(e){try{var i=new r("terminal",{},{execute:function(e,t){var n=s[e];if(!n)return!1;try{t=o(t,n.args);var r=n.handler(i,t);return null==r&&(r=""),"string"==typeof r&&(r=r.replace(/\t/g,"")),r}catch(e){return console.error(e),e.message}}});a()}catch(e){console.error(e)}}},function(r,e){!function(e){var t=t||function(e,t){if(e){var n={welcome:"",prompt:"",separator:"&gt;",theme:"interlaced"};(t=t||n).welcome=t.welcome||n.welcome,t.prompt=t.prompt||n.prompt,t.separator=t.separator||n.separator,t.theme=t.theme||n.theme;var l=Array.prototype.slice.call(arguments,2),u=localStorage.history?JSON.parse(localStorage.history):[],d=u.length,r="",i=document.getElementById(e);i.classList.add("terminal"),i.classList.add("terminal-"+t.theme),i.insertAdjacentHTML("beforeEnd",['<div class="background"><div class="interlace"></div></div>','<div class="container">',"<output></output>",'<table class="input-line">','<tr><td nowrap><div class="prompt">'+t.prompt+t.separator+'</div></td><td width="100%"><input class="cmdline" spellcheck="false" autofocus /></td></tr>',"</table>","</div>"].join(""));var o=i.querySelector(".container"),f=o.querySelector(".input-line"),p=o.querySelector(".input-line .cmdline"),g=o.querySelector("output"),a=o.querySelector(".prompt"),s=document.querySelector(".background");return g.addEventListener("DOMSubtreeModified",function(e){setTimeout(function(){p.scrollIntoView()},0)},!1),t.welcome&&h(t.welcome),i.addEventListener("click",function(e){p.focus()},!1),g.addEventListener("click",function(e){e.stopPropagation()},!1),p.addEventListener("click",function(e){this.value=this.value},!1),f.addEventListener("click",function(e){p.focus()},!1),p.addEventListener("keyup",function(e){27==e.keyCode&&(this.value="",e.stopPropagation(),e.preventDefault());!u.length||38!=e.keyCode&&40!=e.keyCode||(u[d]?u[d]=this.value:r=this.value,38==e.keyCode?--d<0&&(d=0):40==e.keyCode&&++d>u.length&&(d=u.length),this.value=u[d]?u[d]:r,this.value=this.value)},!1),p.addEventListener("keydown",function(e){!function(){var e=p.parentElement;for(;e;){if((e.className||"").includes("active"))return!0;e=e.parentElement}}()||e.stopPropagation();if(13!=e.keyCode)return;var t=this.value;t&&(u[u.length]=t,localStorage.history=JSON.stringify(u),d=u.length);var n=this.parentNode.parentNode.parentNode.parentNode.cloneNode(!0);n.removeAttribute("id"),n.classList.add("line");var r=n.querySelector("input.cmdline");if(r.autofocus=!1,r.readOnly=!0,r.insertAdjacentHTML("beforebegin",r.value),r.parentNode.removeChild(r),g.appendChild(n),f.classList.add("hidden"),this.value="",t&&t.trim()){var i=t.split(" ").filter(function(e,t){return e}),o=i[0];i=i.splice(1)}if(o){var a=!1;for(var s in l){var c=l[s];if(c.execute&&(a=c.execute(o,i)),!1!==a)break}!1===a&&(a=o+": command not found"),h(a||"")}f.classList.remove("hidden")},!0),{clear:function(){g.innerHTML="",p.value="",s.style.minHeight=""},setPrompt:function(e){a.innerHTML=e+t.separator},getPrompt:function(){return a.innerHTML.replace(new RegExp(t.separator+"$"),"")},setTheme:function(e){i.classList.remove("terminal-"+t.theme),t.theme=e,i.classList.add("terminal-"+t.theme)},getTheme:function(){return t.theme},print:h}}function h(e){g.insertAdjacentHTML("beforeEnd",e),p.scrollIntoView()}};if(void 0!==r&&r.exports)r.exports=t;else{var n=e.Terminal;t.noConflict=function(){return e.Terminal=n,t},e.Terminal=t}}(this)},function(t,e,ee){(function(Z){var Y=ee(18),Q=ee(19),V=ee(20),J=ee(21),X=ee(22);function n(e,t){t=t||{},e=J(e);var r=function(t){var n=[],e=!0,r={};Object.keys(t).forEach(function(e){n.push([].concat(t[e],e))});for(;e;){e=!1;for(var i=0;i<n.length;i++)for(var o=i+1;o<n.length;o++){if(n[i].filter(function(e){return-1!==n[o].indexOf(e)}).length){n[i]=n[i].concat(n[o]),n.splice(o,1),e=!0;break}}}return n.forEach(function(e){e=e.filter(function(e,t,n){return n.indexOf(e)===t}),r[e.pop()]=e}),r}(t.alias||{}),c=Object.assign({"short-option-groups":!0,"camel-case-expansion":!0,"dot-notation":!0,"parse-numbers":!0,"boolean-negation":!0,"negation-prefix":"no-","duplicate-arguments-array":!0,"flatten-duplicate-arrays":!0,"populate--":!1,"combine-arrays":!1,"set-placeholder-key":!1,"halt-at-non-option":!1,"strip-aliased":!1,"strip-dashed":!1},t.configuration),n=t.default||{},i=t.configObjects||[],o=t.envPrefix,a=c["populate--"],s=a?"--":"_",l={},u=t.__||X.format,d=null,f={aliases:{},arrays:{},bools:{},strings:{},numbers:{},counts:{},normalize:{},configs:{},defaulted:{},nargs:{},coercions:{},keys:[]},p=/^-[0-9]+(\.[0-9]+)?/,g=new RegExp("^--"+c["negation-prefix"]+"(.+)");[].concat(t.array).filter(Boolean).forEach(function(e){var t=e.key||e,n=Object.keys(e).map(function(e){return{boolean:"bools",string:"strings",number:"numbers"}[e]}).filter(Boolean).pop();n&&(f[n][t]=!0),f.arrays[t]=!0,f.keys.push(t)}),[].concat(t.boolean).filter(Boolean).forEach(function(e){f.bools[e]=!0,f.keys.push(e)}),[].concat(t.string).filter(Boolean).forEach(function(e){f.strings[e]=!0,f.keys.push(e)}),[].concat(t.number).filter(Boolean).forEach(function(e){f.numbers[e]=!0,f.keys.push(e)}),[].concat(t.count).filter(Boolean).forEach(function(e){f.counts[e]=!0,f.keys.push(e)}),[].concat(t.normalize).filter(Boolean).forEach(function(e){f.normalize[e]=!0,f.keys.push(e)}),Object.keys(t.narg||{}).forEach(function(e){f.nargs[e]=t.narg[e],f.keys.push(e)}),Object.keys(t.coerce||{}).forEach(function(e){f.coercions[e]=t.coerce[e],f.keys.push(e)}),Array.isArray(t.config)||"string"==typeof t.config?[].concat(t.config).filter(Boolean).forEach(function(e){f.configs[e]=!0}):Object.keys(t.config||{}).forEach(function(e){f.configs[e]=t.config[e]}),function(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];t.forEach(function(e){Object.keys(e||{}).forEach(function(n){f.aliases[n]||(f.aliases[n]=[].concat(r[n]||[]),f.aliases[n].concat(n).forEach(function(e){if(/-/.test(e)&&c["camel-case-expansion"]){var t=Y(e);t!==n&&-1===f.aliases[n].indexOf(t)&&(f.aliases[n].push(t),l[t]=!0)}}),f.aliases[n].concat(n).forEach(function(e){if(1<e.length&&/[A-Z]/.test(e)&&c["camel-case-expansion"]){var t=Q(e,"-");t!==n&&-1===f.aliases[n].indexOf(t)&&(f.aliases[n].push(t),l[t]=!0)}}),f.aliases[n].forEach(function(t){f.aliases[t]=[n].concat(f.aliases[n].filter(function(e){return t!==e}))}))})})}(t.key,r,t.default,f.arrays),Object.keys(n).forEach(function(t){(f.aliases[t]||[]).forEach(function(e){n[e]=n[t]})});var h={_:[]};Object.keys(f.bools).forEach(function(e){Object.prototype.hasOwnProperty.call(n,e)&&($(e,n[e]),function(e){[].concat(f.aliases[e]||[],e).forEach(function(e){f.defaulted[e]=!0})}(e))});for(var m,v,b,y,w,k,x,E=[],A=0;A<e.length;A++){var j,S,O,N,F,_,C=e[A];if(C.match(/^--.+=/)||!c["short-option-groups"]&&C.match(/^-.+=/))W((N=C.match(/^--?([^=]+)=([\s\S]*)$/))[1],f.nargs)?(e.splice(A+1,0,N[2]),A=T(A,N[1],e)):W(N[1],f.arrays)&&e.length>A+1?(e.splice(A+1,0,N[2]),A=z(A,N[1],e)):$(N[1],N[2]);else if(C.match(g)&&c["boolean-negation"])$(S=C.match(g)[1],!1);else if(C.match(/^--.+/)||!c["short-option-groups"]&&C.match(/^-[^-]+/))W(S=C.match(/^--?(.+)/)[1],f.nargs)?A=T(A,S,e):W(S,f.arrays)&&e.length>A+1?A=z(A,S,e):void 0===(F=0===f.nargs[S]?void 0:e[A+1])||F.match(/^-/)&&!F.match(p)||W(S,f.bools)||W(S,f.counts)?/^(true|false)$/.test(F)?($(S,F),A++):$(S,R(S)):($(S,F),A++);else if(C.match(/^-.\..+=/))$((N=C.match(/^-([^=]+)=([\s\S]*)$/))[1],N[2]);else if(C.match(/^-.\..+/))F=e[A+1],S=C.match(/^-(.\..+)/)[1],void 0===F||F.match(/^-/)||W(S,f.bools)||W(S,f.counts)?$(S,R(S)):($(S,F),A++);else if(C.match(/^-[^-]+/)&&!C.match(p)){O=C.slice(1,-1).split(""),j=!1;for(var L=0;L<O.length;L++){if(F=C.slice(L+2),O[L+1]&&"="===O[L+1]){_=C.slice(L+3),W(S=O[L],f.nargs)?(e.splice(A+1,0,_),A=T(A,S,e)):W(S,f.arrays)&&e.length>A+1?(e.splice(A+1,0,_),A=z(A,S,e)):$(S,_),j=!0;break}if("-"!==F){if(/[A-Za-z]/.test(O[L])&&/^-?\d+(\.\d*)?(e-?\d+)?$/.test(F)){$(O[L],F),j=!0;break}if(O[L+1]&&O[L+1].match(/\W/)){$(O[L],F),j=!0;break}$(O[L],R(O[L]))}else $(O[L],F)}S=C.slice(-1)[0],j||"-"===S||(W(S,f.nargs)?A=T(A,S,e):W(S,f.arrays)&&e.length>A+1?A=z(A,S,e):void 0===(F=e[A+1])||/^(-|--)[^-]/.test(F)&&!F.match(p)||W(S,f.bools)||W(S,f.counts)?/^(true|false)$/.test(F)?($(S,F),A++):$(S,R(S)):($(S,F),A++))}else{if("--"===C){E=e.slice(A+1);break}if(c["halt-at-non-option"]){E=e.slice(A);break}h._.push(M("_",C))}}P(h,!0),P(h,!1),m=h,B(v={},f.aliases,n),Object.keys(f.configs).forEach(function(t){var n=m[t]||v[t];if(n)try{var r=null,e=V.resolve(Z.cwd(),n);if("function"==typeof f.configs[t]){try{r=f.configs[t](e)}catch(e){r=e}if(r instanceof Error)return void(d=r)}else r=ee(23)(e);I(r)}catch(e){m[t]&&(d=Error(u("Invalid JSON config file: %s",n)))}}),function(){if(void 0===i)return;i.forEach(function(e){I(e)})}(),B(h,f.aliases,n),b=h,w={},Object.keys(b).forEach(function(e){if(!w.hasOwnProperty(e)&&"function"==typeof(y=W(e,f.coercions)))try{var t=y(b[e]);[].concat(f.aliases[e]||[],e).forEach(function(e){w[e]=b[e]=t})}catch(e){d=e}}),c["set-placeholder-key"]&&(k=h,f.keys.forEach(function(e){~e.indexOf(".")||void 0===k[e]&&(k[e]=void 0)})),Object.keys(f.counts).forEach(function(e){H(h,e.split("."))||$(e,0)}),a&&E.length&&(h[s]=[]),E.forEach(function(e){h[s].push(e)}),c["camel-case-expansion"]&&c["strip-dashed"]&&Object.keys(h).filter(function(e){return"--"!==e&&e.includes("-")}).forEach(function(e){delete h[e]}),c["strip-aliased"]&&(x=[]).concat.apply(x,_toConsumableArray(Object.keys(r).map(function(e){return r[e]}))).forEach(function(e){c["camel-case-expansion"]&&delete h[e.split(".").map(function(e){return Y(e)}).join(".")],delete h[e]});function T(e,t,n){var r,i=W(t,f.nargs),o=0;for(r=e+1;r<n.length&&!n[r].match(/^-[^0-9]/);r++)o++;o<i&&(d=Error(u("Not enough arguments following: %s",t)));var a=Math.min(o,i);for(r=e+1;r<a+e+1;r++)$(t,n[r]);return e+a}function z(e,t,n){for(var r=e+1,i=[],o=0<e,a=e+1;a<n.length;a++){if(/^-/.test(n[a])&&!p.test(n[a])){a===r&&$(t,U("array")),o=!0;break}e=a,i.push(n[a])}return o?$(t,i.map(function(e){return D(t,e)})):i.forEach(function(e){$(t,e)}),e}function $(e,t){if(function(e){[].concat(f.aliases[e]||[],e).forEach(function(e){delete f.defaulted[e]})}(e),/-/.test(e)&&c["camel-case-expansion"]){var n=e.split(".").map(function(e){return Y(e)}).join(".");!function e(t,n){f.aliases[t]&&f.aliases[t].length||(f.aliases[t]=[n],l[n]=!0);f.aliases[n]&&f.aliases[n].length||e(n,t)}(e,n)}var r=D(e,t),i=e.split(".");q(h,i,r),f.aliases[e]&&f.aliases[e].forEach(function(e){e=e.split("."),q(h,e,r)}),1<i.length&&c["dot-notation"]&&(f.aliases[i[0]]||[]).forEach(function(e){e=e.split(".");var t=[].concat(i);t.shift(),e=e.concat(t),q(h,e,r)}),W(e,f.normalize)&&!W(e,f.arrays)&&[e].concat(f.aliases[e]||[]).forEach(function(e){h.__defineSetter__(e,function(e){t=V.normalize(e)}),h.__defineGetter__(e,function(){return"string"==typeof t?V.normalize(t):t})})}function D(e,t){"string"!=typeof t||"'"!==t[0]&&'"'!==t[0]||t[t.length-1]!==t[0]||(t=t.substring(1,t.length-1)),(W(e,f.bools)||W(e,f.counts))&&"string"==typeof t&&(t="true"===t);var n=M(e,t);return W(e,f.counts)&&(G(n)||"boolean"==typeof n)&&(n=K),W(e,f.normalize)&&W(e,f.arrays)&&(n=Array.isArray(t)?t.map(V.normalize):V.normalize(t)),n}function M(e,t){W(e,f.strings)||W(e,f.coercions)||(function(e){return null!=e&&("number"==typeof e||(!!/^0x[0-9a-f]+$/i.test(e)||!(1<e.length&&"0"===e[0])&&/^[-]?(?:\d+(?:\.\d*)?|\.\d+)(e[-+]?\d+)?$/.test(e)))}(t)&&c["parse-numbers"]&&Number.isSafeInteger(Math.floor(t))||!G(t)&&W(e,f.numbers))&&(t=Number(t));return t}function I(r,i){Object.keys(r).forEach(function(e){var t=r[e],n=i?i+"."+e:e;"object"===(void 0===t?"undefined":_typeof(t))&&null!==t&&!Array.isArray(t)&&c["dot-notation"]?I(t,n):(!H(h,n.split("."))||f.defaulted[n]||f.arrays[n]&&c["combine-arrays"])&&$(n,t)})}function P(n,r){if(void 0!==o){var i="string"==typeof o?o:"";Object.keys(Z.env).forEach(function(e){if(""===i||0===e.lastIndexOf(i,0)){var t=e.split("__").map(function(e,t){return 0===t&&(e=e.substring(i.length)),Y(e)});!(r&&f.configs[t.join(".")]||!r)||H(n,t)&&!f.defaulted[t.join(".")]||$(t.join("."),Z.env[e])}})}}function B(n,e,r){Object.keys(r).forEach(function(t){H(n,t.split("."))||(q(n,t.split("."),r[t]),(e[t]||[]).forEach(function(e){H(n,e.split("."))||q(n,e.split("."),r[t])}))})}function H(e,t){var n=e;c["dot-notation"]||(t=[t.join(".")]),t.slice(0,-1).forEach(function(e){n=n[e]||{}});var r=t[t.length-1];return"object"===(void 0===n?"undefined":_typeof(n))&&r in n}function q(e,t,n){var r=e;c["dot-notation"]||(t=[t.join(".")]),t.slice(0,-1).forEach(function(e,t){"object"===(void 0===r?"undefined":_typeof(r))&&void 0===r[e]&&(r[e]={}),r="object"!==_typeof(r[e])||Array.isArray(r[e])?(Array.isArray(r[e])?r[e].push({}):r[e]=[r[e],{}],r[e][r[e].length-1]):r[e]});var i=t[t.length-1],o=W(t.join("."),f.arrays),a=Array.isArray(n),s=c["duplicate-arguments-array"];!s&&W(i,f.nargs)&&(s=!0,(!G(r[i])&&1===f.nargs[i]||Array.isArray(r[i])&&r[i].length===f.nargs[i])&&(r[i]=void 0)),n===K?r[i]=K(r[i]):Array.isArray(r[i])?s&&o&&a?r[i]=c["flatten-duplicate-arrays"]?r[i].concat(n):(Array.isArray(r[i][0])?r[i]:[r[i]]).concat([n]):s||Boolean(o)!==Boolean(a)?r[i]=r[i].concat([n]):r[i]=n:void 0===r[i]&&o?r[i]=a?n:[n]:s&&!(void 0===r[i]||W(i,f.bools)||W(t.join("."),f.bools)||W(i,f.counts))?r[i]=[r[i],n]:r[i]=n}function W(e,t){var n=!1;return[].concat(f.aliases[e]||[],e).forEach(function(e){t[e]&&(n=t[e])}),n}function R(e){return!W(e,f.bools)&&!W(e,f.counts)&&""+e in n?n[e]:U(function(e){var t="boolean";W(e,f.strings)?t="string":W(e,f.numbers)?t="number":W(e,f.arrays)&&(t="array");return t}(e))}function U(e){return{boolean:!0,string:"",number:void 0,array:[]}[e]}function G(e){return void 0===e}return{argv:h,error:d,aliases:f.aliases,newAliases:l,configuration:c}}function K(e){return void 0!==e?e+1:1}function e(e,t){return n(e.slice(),t).argv}e.detailed=function(e,t){return n(e.slice(),t)},t.exports=e}).call(e,ee(17))},function(e,t){var n,r,i=e.exports={};function o(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function s(t){if(n===setTimeout)return setTimeout(t,0);if((n===o||!n)&&setTimeout)return n=setTimeout,setTimeout(t,0);try{return n(t,0)}catch(e){try{return n.call(null,t,0)}catch(e){return n.call(this,t,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:o}catch(e){n=o}try{r="function"==typeof clearTimeout?clearTimeout:a}catch(e){r=a}}();var c,l=[],u=!1,d=-1;function f(){u&&c&&(u=!1,c.length?l=c.concat(l):d=-1,l.length&&p())}function p(){if(!u){var e=s(f);u=!0;for(var t=l.length;t;){for(c=l,l=[];++d<t;)c&&c[d].run();d=-1,t=l.length}c=null,u=!1,function(t){if(r===clearTimeout)return clearTimeout(t);if((r===a||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(t);try{r(t)}catch(e){try{return r.call(null,t)}catch(e){return r.call(this,t)}}}(e)}}function g(e,t){this.fun=e,this.array=t}function h(){}i.nextTick=function(e){var t=new Array(arguments.length-1);if(1<arguments.length)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];l.push(new g(e,t)),1!==l.length||u||s(p)},g.prototype.run=function(){this.fun.apply(null,this.array)},i.title="browser",i.browser=!0,i.env={},i.argv=[],i.version="",i.versions={},i.on=h,i.addListener=h,i.once=h,i.off=h,i.removeListener=h,i.removeAllListeners=h,i.emit=h,i.prependListener=h,i.prependOnceListener=h,i.listeners=function(e){return[]},i.binding=function(e){throw new Error("process.binding is not supported")},i.cwd=function(){return"/"},i.chdir=function(e){throw new Error("process.chdir is not supported")},i.umask=function(){return 0}},function(e,t){function n(e,t){if("string"!=typeof e&&!Array.isArray(e))throw new TypeError("Expected the input to be `string | string[]`");var n;return t=Object.assign({pascalCase:!1},t),0===(e=Array.isArray(e)?e.map(function(e){return e.trim()}).filter(function(e){return e.length}).join("-"):e.trim()).length?"":1===e.length?t.pascalCase?e.toUpperCase():e.toLowerCase():(e!==e.toLowerCase()&&(e=function(e){for(var t=!1,n=!1,r=!1,i=0;i<e.length;i++){var o=e[i];t&&/[a-zA-Z]/.test(o)&&o.toUpperCase()===o?(e=e.slice(0,i)+"-"+e.slice(i),r=n,n=!(t=!1),i++):n&&r&&/[a-zA-Z]/.test(o)&&o.toLowerCase()===o?(e=e.slice(0,i-1)+"-"+e.slice(i-1),r=n,t=!(n=!1)):(t=o.toLowerCase()===o&&o.toUpperCase()!==o,r=n,n=o.toUpperCase()===o&&o.toLowerCase()!==o)}return e}(e)),e=e.replace(/^[_.\- ]+/,"").toLowerCase().replace(/[_.\- ]+(\w|$)/g,function(e,t){return t.toUpperCase()}).replace(/\d+(\w|$)/g,function(e){return e.toUpperCase()}),n=e,t.pascalCase?n.charAt(0).toUpperCase()+n.slice(1):n)}e.exports=n,e.exports.default=n},function(e,t){e.exports=function(e,t){if("string"!=typeof e)throw new TypeError("Expected a string");return t=void 0===t?"_":t,e.replace(/([a-z\d])([A-Z])/g,"$1"+t+"$2").replace(/([A-Z]+)([A-Z][a-z\d]+)/g,"$1"+t+"$2").toLowerCase()}},function(e,l,t){(function(i){function o(e,t){for(var n=0,r=e.length-1;0<=r;r--){var i=e[r];"."===i?e.splice(r,1):".."===i?(e.splice(r,1),n++):n&&(e.splice(r,1),n--)}if(t)for(;n--;)e.unshift("..");return e}function a(e){return t.exec(e).slice(1)}var t=/^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;function s(e,t){if(e.filter)return e.filter(t);for(var n=[],r=0;r<e.length;r++)t(e[r],r,e)&&n.push(e[r]);return n}l.resolve=function(){for(var e="",t=!1,n=arguments.length-1;-1<=n&&!t;n--){var r=0<=n?arguments[n]:i.cwd();if("string"!=typeof r)throw new TypeError("Arguments to path.resolve must be strings");r&&(e=r+"/"+e,t="/"===r.charAt(0))}return(t?"/":"")+(e=o(s(e.split("/"),function(e){return!!e}),!t).join("/"))||"."},l.normalize=function(e){var t=l.isAbsolute(e),n="/"===r(e,-1);return(e=o(s(e.split("/"),function(e){return!!e}),!t).join("/"))||t||(e="."),e&&n&&(e+="/"),(t?"/":"")+e},l.isAbsolute=function(e){return"/"===e.charAt(0)},l.join=function(){var e=Array.prototype.slice.call(arguments,0);return l.normalize(s(e,function(e,t){if("string"!=typeof e)throw new TypeError("Arguments to path.join must be strings");return e}).join("/"))},l.relative=function(e,t){function n(e){for(var t=0;t<e.length&&""===e[t];t++);for(var n=e.length-1;0<=n&&""===e[n];n--);return n<t?[]:e.slice(t,n-t+1)}e=l.resolve(e).substr(1),t=l.resolve(t).substr(1);for(var r=n(e.split("/")),i=n(t.split("/")),o=Math.min(r.length,i.length),a=o,s=0;s<o;s++)if(r[s]!==i[s]){a=s;break}var c=[];for(s=a;s<r.length;s++)c.push("..");return(c=c.concat(i.slice(a))).join("/")},l.sep="/",l.delimiter=":",l.dirname=function(e){var t=a(e),n=t[0],r=t[1];return n||r?n+(r=r&&r.substr(0,r.length-1)):"."},l.basename=function(e,t){var n=a(e)[2];return t&&n.substr(-1*t.length)===t&&(n=n.substr(0,n.length-t.length)),n},l.extname=function(e){return a(e)[3]};var r="b"==="ab".substr(-1)?function(e,t,n){return e.substr(t,n)}:function(e,t,n){return t<0&&(t=e.length+t),e.substr(t,n)}}).call(l,t(17))},function(e,t){e.exports=function(e){if(Array.isArray(e))return e.map(function(e){return"string"!=typeof e?e+"":e});e=e.trim();for(var t=0,n=null,r=null,i=null,o=[],a=0;a<e.length;a++)n=r," "!==(r=e.charAt(a))||i?(r===i?i=null:"'"!==r&&'"'!==r||i||(i=r),o[t]||(o[t]=""),o[t]+=r):" "!==n&&t++;return o}},function(e,t){function s(e,t){return Math.random()*(t-e)+e}e.exports={slowLog:function e(t,n,r,i,o){var a=n.next();if(null==a)return o();t.print(a.replace(/\t/g,"")+"<br/>");setTimeout(function(){e(t,n,r,i,o)},s(r,i))},series:function n(r,i){var e=r.shift();e(function(e,t){return e?i(e):r.length?n(r,i):i(null,t)})},randomNumber:s}},function(e,t,n){var r={"./index":16,"./index.js":16,"./lib/tokenize-arg-string":21,"./lib/tokenize-arg-string.js":21};function i(e){return n(o(e))}function o(e){return r[e]||function(){throw new Error("Cannot find module '"+e+"'.")}()}i.keys=function(){return Object.keys(r)},i.resolve=o,(e.exports=i).id=23},,,,,function(e,t,n){var r=n(29),i=n(30),o=n(31);function a(e,t){var n="/home/"+e;"root"===e&&(n="/root"),r.add(e,n,e,t),"root"===e?o.mkdir(n,r.ids("root")):(o.mkdir("/home",r.ids("root")),o.mkdir(n,r.ids(e))),o.mkdir(n+"/Documents",r.ids(e)),o.mkdir(n+"/Code",r.ids(e)),o.write(n+"/.bash_history","ls\n\t  ls\n\t  mkdir\n\t  rm -rf /",r.ids(e)),o.write(n+"/.bash_profile",'source /etc/profile\n\t\n\t  export NVM_DIR="/'+n+'}/.nvm"\n\t  [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"  # This loads nvm\n\t\n\t  nvm use 10',r.ids(e))}e.exports=function(){i.add("root"),i.add("wheel"),i.add("staff"),i.add("alex"),a("root",[]),a("alex",["wheel","staff"]),o.cd("/home/alex")}},function(e,t,n){var i=n(30),o=0,a={},r={add:function(e,t,n,r){a[o]={uid:o,gid:i.find(n).gid,name:e,home:t,groups:r.map(function(e){return i.find(e).gid})},o++},find:function(t){return"string"==typeof t||t instanceof String?Object.values(a).find(function(e){return e.name===t}):a[t]},ids:function(e){var t=r.find(e);if(t)return{uid:t.uid,gid:t.gid}}};e.exports=r},function(e,t){var n=0,r={},i={add:function(e){r[n]={gid:n,name:e},n++},find:function(t){return"string"==typeof t||t instanceof String?Object.values(r).find(function(e){return e.name===t}):r[t]}};e.exports=i},function(e,t,n){function l(e){var t=0<arguments.length&&void 0!==e?e:{};return{uid:t.uid||0,gid:t.gid||0,size:function(){var n=this;return Object.keys(this.children).reduce(function(e,t){return e+n.children[t].size()},0)},mtime:new Date,children:{}}}var r=n(20).resolve,i="/home/alex",u=l({uid:0,gid:0}),o={pwd:function(){return i},getNode:function(e){var t=d(e);if("/"===t)return u;for(var n=(t=t.replace(/^\/+/g,"").replace(/\/+$/g,"")).split("/"),r=u.children[n[0]],i=1;i<n.length;i++){if(!r.children[n[i]])return null;r=r.children[n[i]]}return r},mkdir:function(e,t){for(var n=d(e),r=(n=n.replace(/^\/+/g,"").replace(/\/+$/g,"")).split("/"),i=u,o=0;o<r.length;o++){var a=i.children[r[o]];if(a)i=a;else{if(!t.p&&o!==r.length-1)throw new Error("mkdir: "+e+": No such file or directory");i=i.children[r[o]]=l(t)}}},write:function(e,t,n){for(var r=d(e),i=(r=r.replace(/^\/+/g,"").replace(/\/+$/g,"")).split("/"),o=u,a=i.pop(),s=0;s<i.length;s++){var c=o.children[i[s]];if(c)o=c;else{if(!n.p)throw new Error("touch: "+e+": No such file or directory");o=o.children[i[s]]=l(n)}}o.children[a]=function(e,t){var n=0<arguments.length&&void 0!==e?e:"",r=1<arguments.length&&void 0!==t?t:{};return{uid:r.uid||0,gid:r.gid||0,size:function(){return this.content.length},mtime:new Date,content:n}}(t,n)},read:function(e){var t=d(e),n=o.getNode(t);if(!n)throw new Error("read: "+e+": No such file or directory");return n.content},rm:function(e,t){for(var n=d(e),r=(n=n.replace(/^\/+/g,"").replace(/\/+$/g,"")).split("/"),i=u,o=r.pop(),a=0;a<r.length;a++){var s=i.children[r[a]];if(!s)throw new Error("rm: "+e+": No such file or directory");i=s}if(!i.children[o])throw new Error("rm: "+e+": No such file or directory");if(i.children[o].children&&!t.r)throw new Error("rm: "+e+": is a directory");delete i.children[o]},cd:function(e){var t=d(e);if(!o.getNode(t))throw new Error("-bash: cd: "+e+": No such file or directory");i=t},ls:function(e){var t=d(e||i),n=o.getNode(t);if(!n)throw new Error("read: "+e+": No such file or directory");return n.content?[{name:t.split("/").pop(),node:n}]:Object.keys(n.children).map(function(e){return{name:e,node:n.children[e]}})}};function d(e){var t=e;return"/"!==t.substring(0,1)&&(t=i+"/"+t),t=(t=t.replace(/\/+/g,"/")).replace(/^\/+/g,"").replace(/\/+$/g,""),t=r(t="/"+t)}e.exports=o},function(e,t,n){var r=n(31),i=n(29),o=n(30);e.exports={handler:function(e,t){var n=r.ls(t._[0]);return n=n.sort(function(e,t){return e.name.localeCompare(t.name)}),t.a||(n=n.filter(function(e){return"."!==e.name.substring(0,1)})),t.l?"\n\t      <table><tbody>\n\t        "+n.map(function(e){var t=e.node,n=t.mtime.toLocaleDateString("en-GB",{day:"2-digit",month:"short",hour:"2-digit",minute:"2-digit"});return"<tr>\n\t              <td>"+(t.children?"d":"-")+"rw-r--r--&nbsp;</td>\n\t              <td>"+i.find(t.uid).name+"&nbsp;</td>\n\t              <td>"+o.find(t.gid).name+"&nbsp;</td>\n\t              <td>"+t.size()+"&nbsp;</td>\n\t              <td>"+n+"&nbsp;</td>\n\t              <td>"+e.name+"</td>\n\t            </tr>"}).join("")+"\n\t      <tbody></table>":n.sort(function(e,t){return e.name.localeCompare(t.name)}).map(function(e){return e.name}).join(" ")},args:{boolean:["l","a"]}}},function(e,t,n){var r=n(31);e.exports={handler:function(){return r.pwd()}}},function(e,t,n){var i=n(31),o=n(29);e.exports={handler:function(e,t){var n=t._;if(!n.length)throw new Error("usage: mkdir [-pv] [-m mode] directory ...");for(var r=0;r<n.length;r++)i.mkdir(n[r],{uid:o.find("alex").uid,gid:o.find("alex").gid,p:t.p});return""},args:{boolean:["p"]}}},function(e,t,n){var r=n(31);e.exports={handler:function(e,t){var n=t._;if(!n.length)throw new Error("usage: touch [-A [-][[hh]mm]SS] [-acfhm] [-r file] [-t [[CC]YY]MMDDhhmm[.SS]] file ...");return r.write(n[0],"",{uid:r.user(500).uid,gid:r.user(500).gid}),""}}},function(e,t,n){var r=n(31);e.exports={handler:function(e,t){var n=r.getNode(t._[0]);if(!n)throw new Error("cat: "+t._[0]+": No such file or directory");if(n.children)throw new Error("cat: "+t._[0]+": Is a directory");return"<pre>"+n.content+"</pre>"}}},function(e,t,n){var r=n(31);e.exports={handler:function(e,t){var n=t._;return n.length||n.push("/home/alex"),r.cd(n[0]),""}}},function(e,t,n){var i=n(31);e.exports={handler:function(e,t){var n=t._;if(!n.length)throw new Error("usage: rm [-f | -i] [-dPRrvW] file ... unlink file");for(var r=0;r<n.length;r++)i.rm(n[r],t);return""},args:{boolean:["r","f"]}}},function(e,t){e.exports={handler:function(e){return e.clear(),""}}},function(e,t){e.exports={handler:function(e,t){if(!t._.length)return e.getTheme();if(1<t._.length)throw new Error("Too many arguments");if(t._[0].match(/^interlaced|modern|white$/))return e.setTheme(t[0]),"";throw new Error("Invalid theme")}}},function(e,t){e.exports={handler:function(){return"1.0.2"}}},function(e,t,n){n(22).slowLog;var r={install:n(43)};e.exports={handler:function(e,t){var n=t._.shift();return r[n]?r[n].handler(e,t):"<pre>Usage: npm <command>\n\t\n\twhere <command> is one of:\n\t    "+Object.keys(r).sort(function(e,t){return e.localeCompare(t)})+"\n\t\n\tnpm <command> -h  quick help on <command>\n\tnpm -l            display full usage info\n\tnpm help <term>   search for help on <term>\n\tnpm help npm      involved overview\n\t\n\tSpecify configs in the ini-formatted file:\n\t    /home/alex/.npmrc\n\tor on the command line via: npm <command> --key value\n\tConfig info can be viewed via: npm help config\n\t\n\tnpm@6.4.1 /home/alex/.nvm/versions/node/v10.15.3/lib/node_modules/npm</pre>"},args:{boolean:["save","save-dev","production","g","global"]}}},function(e,t,n){var r=n(44).npmInstallLog;e.exports={handler:function(e,t){r(e,{name:t._[0],dependencies:["dnscache","express-http-proxy","ipfsd-ctl","ipfs-http-client","ipfs","express","debug","once","request","rc","request-promise","yargs","@yarnpkg%2flockfile","ipfs-registry-mirror-common","which-promise"]})}}},function(e,t,n){var r=n(22),i=r.slowLog,o=r.randomNumber;e.exports={npmInstallLog:function(e,t){var n=["npm info it worked if it ends with ok","npm info using npm@6.4.1","npm info using node@v10.15.3","npm http fetch GET 304 https://registry.npmjs.org/"+t.name+" 997ms (from cache)","npm timing stage:loadCurrentTree Completed in 6248ms","npm timing stage:loadIdealTree:cloneCurrentTree Completed in 36ms","npm timing stage:loadIdealTree:loadShrinkwrap Completed in 2452ms"];t.dependencies.forEach(function(e){n.push("npm http fetch GET 304 https://registry.npmjs.org/"+e+" "+o(100,500)+"ms (from cache)")}),t.dependencies.forEach(function(e){n.push("npm info lifecycle "+e+"@0.8.0~postinstall: "+e+"@0.8.0")}),n=n.concat(["npm timing action:postinstall Completed in 391ms","npm timing stage:executeActions Completed in %time%ms","npm timing stage:rollbackFailedOptional Completed in 2ms","npm timing stage:runTopLevelLifecycles Completed in %time%ms","+ "+t.name+"@0.16.3","added 163 packages from 285 contributors and updated 1132 packages in 97.761s","npm timing npm Completed in %time%ms","npm info ok"]);var r=Date.now();i(e,{next:function(){var e=n.shift();return e?e.replace("%time%",Date.now()-r):null}},50,200,function(){})}}},function(e,t,n){var i=n(22).slowLog,o={init:n(46),install:n(47)};e.exports={handler:function(e,t){var n=t._.shift();if(o[n])return o[n].handler(e,t);var r=["👩‍🚀 Starting local proxy","🚀 Server running on port 49820","🎁 Installing dependencies with /Users/alex/.nvm/versions/node/v10.15.3/bin/npm","npm info it worked if it ends with ok","npm info using npm@6.4.1","npm info using node@v10.15.3","<pre>Usage: npm <command>\n\t\n\twhere <command> is one of:\n\t    access, adduser, audit, bin, bugs, c, cache, ci, cit,\n\t    completion, config, create, ddp, dedupe, deprecate,\n\t    dist-tag, docs, doctor, edit, explore, get, help,\n\t    help-search, hook, i, init, install, install-test, it, link,\n\t    list, ln, login, logout, ls, outdated, owner, pack, ping,\n\t    prefix, profile, prune, publish, rb, rebuild, repo, restart,\n\t    root, run, run-script, s, se, search, set, shrinkwrap, star,\n\t    stars, start, stop, t, team, test, token, tst, un,\n\t    uninstall, unpublish, unstar, up, update, v, version, view,\n\t    whoami\n\t\n\tnpm <command> -h  quick help on <command>\n\tnpm -l            display full usage info\n\tnpm help <term>   search for help on <term>\n\tnpm help npm      involved overview\n\t\n\tSpecify configs in the ini-formatted file:\n\t    /Users/alex/.npmrc\n\tor on the command line via: npm <command> --key value\n\tConfig info can be viewed via: npm help config\n\t\n\tnpm@6.4.1 /Users/alex/.nvm/versions/node/v10.15.3/lib/node_modules/npm\n\t🎁 /Users/alex/.nvm/versions/node/v10.15.3/bin/npm exited with code 1\n\t🤷 No package-lock.json found</pre>"];return i(e,{next:function(){return r.shift()}},50,200,function(){}),""},args:{boolean:["save","y"]}}},function(e,t,n){var i=n(31),o=n(29);n(22).slowLog;e.exports={handler:function(e,t){var n=i.pwd(),r='{\n\t  "name": "'+n.split("/").pop()+'",\n\t  "version": "1.0.0",\n\t  "description": "",\n\t  "main": "index.js",\n\t  "scripts": {\n\t    "test": "echo \\"Error: no test specified\\" && exit 1"\n\t  },\n\t  "keywords": [],\n\t  "author": "",\n\t  "license": "ISC"\n\t}';return i.write(n+"/package.json",r,o.ids("alex")),"<pre>Wrote to "+n+"/package.json:\n\t\n\t    "+r+"</pre>"},args:{boolean:["y"]}}},function(e,t,n){var a=n(31),s=n(29),r=n(22),i=r.slowLog;r.randomNumber;e.exports={handler:function(e,t){var n=a.pwd(),r=n+"/package.json",i=a.read(r),o=JSON.parse(i);t._.length&&(c(e,t._[0]),t.save&&(o.dependencies=o.dependencies||{},o.dependencies[t._[0]]="^9.0.0",a.write(r,JSON.stringify(o,null,2),s.ids("alex")),a.write(n+"/package-lock.json",'{\n\t  "name": "'+o.name+'",\n\t  "version": "1.0.0",\n\t  "lockfileVersion": 1,\n\t  "requires": true,\n\t  "dependencies": {\n\t    "'+t._[0]+'": {\n\t      "version": "9.0.0",\n\t      "resolved": "https://registry.js.ipfs.io/'+t._[0]+"/-/"+t._[0]+'-9.0.0.tgz",\n\t      "integrity": "sha512-t/OYhhJ2SD+YGBQcjY8GzzDHEk9f3nerxjtfa6tlMXfe7frs/WozhvCNoGvpM0P3bNf3Gq5ZRMlGr5f3r4/N8A=="\n\t    }\n\t  }\n\t}'),a.mkdir(n+"/node_modules",s.ids("alex")),a.mkdir(n+"/node_modules/"+t._[0],s.ids("alex")),a.write(n+"/node_modules/"+t._[0]+"/package.json","I am a very nice package",s.ids("alex")),a.write(n+"/node_modules/"+t._[0]+"/index.js","Look at me being an implementation",s.ids("alex"))))},args:{boolean:["save"]}};var c=function(e,t){var n=["👩‍🚀 Starting local proxy","🚀 Server running on port 60000","🎁 Installing dependencies with /home/alex/.nvm/versions/node/v10.15.3/bin/npm","npm info it worked if it ends with ok","npm info using npm@6.4.1","npm info using node@v10.15.3","😈 Spawning an in-process IPFS node using repo at /home/alex/.jsipfs2","Swarm listening on /ip4/127.0.0.1/tcp/60015/ipfs/QmVYDeLg2UsfvY1tYQuHDN5ioiCiengfNGimMFbnjyvbjb","Swarm listening on /p2p-circuit/ipfs/QmVYDeLg2UsfvY1tYQuHDN5ioiCiengfNGimMFbnjyvbjb","Swarm listening on /p2p-circuit/ip4/127.0.0.1/tcp/60015/ipfs/QmVYDeLg2UsfvY1tYQuHDN5ioiCiengfNGimMFbnjyvbjb","🗂️  Loading registry index from https://registry.js.ipfs.io","☎️  Dialling registry mirror /ip4/35.178.192.119/tcp/10036/ipfs/QmctQ4T1Sv1aBTtRhtzmRwvAf8svtHLPhJWWbv6wfVcrRN,/dns4/registry.js.ipfs.io/tcp/10036/ipfs/QmctQ4T1Sv1aBTtRhtzmRwvAf8svtHLPhJWWbv6wfVcrRN","📱️ Connected to registry","🆕 New versions of "+t+" detected - 1.0.0, 1.0.1, 1.1.0, 1.1.1, 1.2.0, 1.2.1, 1.3.0, 1.4.0, 1.4.1, 1.5.0, 2.0.0, 2.0.1, 2.0.2, 2.0.3, 2.0.5, 2.0.6, 2.0.7, 2.0.8, 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.2.0, 2.3.0, 2.4.0, 3.0.0, 3.0.1, 3.1.0, 3.1.1, 3.1.2, 4.0.0, 4.0.1, 4.0.2, 4.0.3, 4.0.4, 4.1.0, 5.0.0, 6.0.0, 7.0.0, 7.0.1, 7.0.2, 7.1.0, 7.2.0, 7.2.1, 8.0.1, 8.0.2, 8.1.1, 9.0.0, 8.1.0","📄 GET /"+t+" 200 2857ms","npm http fetch GET 200 http://localhost:60000/"+t+" 2907ms","npm WARN foo@1.0.0 No description","npm WARN foo@1.0.0 No repository field."," ","📄 POST /-/npm/v1/security/audits/quick 200 439ms","npm timing audit submit Completed in 493ms","npm http fetch POST 200 http://localhost:60000/-/npm/v1/security/audits/quick 492ms","npm timing audit body Completed in 0ms","+ "+t+"@9.0.0","added 1 package from 1 contributor and audited 1 package in %time%ms","found 0 vulnerabilities"," ","npm timing npm Completed in %time%ms","npm info ok ","🎁 /Users/alex/.nvm/versions/node/v10.15.3/bin/npm exited with code 0","🔏 Updating package-lock.json"],r=Date.now();i(e,{next:function(){var e=n.shift();return e?e.replace("%time%",Date.now()-r):null}},200,500,function(){})}}]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
