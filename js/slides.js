"use strict";!function(n){var i={};function a(e){if(i[e])return i[e].exports;var t=i[e]={exports:{},id:e,loaded:!1};return n[e].call(t.exports,t,t.exports,a),t.loaded=!0,t.exports}a.m=n,a.c=i,a.p="",a(0)}([function(e,t,n){n(1);var i=n(2),a=n(3),r=n(4),o=n(5),s=n(6),l=n(7),c=n(8),u=n(9),d=n(10),p=n(11),g=n(13),f=[a(),r(),o(),s(".delayed, .bullet"),l(),c(),u(),d(),p(),g()];try{n(!function(){var e=new Error('Cannot find module "plugins"');throw e.code="MODULE_NOT_FOUND",e}())(f)}catch(e){}var h=i.from("article",f);try{n(!function(){var e=new Error('Cannot find module "deck"');throw e.code="MODULE_NOT_FOUND",e}())(h)}catch(e){}},function(t,e){(function(e){var c=function(c){var u=/\blang(?:uage)?-([\w-]+)\b/i,t=0,L={manual:c.Prism&&c.Prism.manual,disableWorkerMessageHandler:c.Prism&&c.Prism.disableWorkerMessageHandler,util:{encode:function(e){return e instanceof C?new C(e.type,L.util.encode(e.content),e.alias):Array.isArray(e)?e.map(L.util.encode):e.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/\u00a0/g," ")},type:function(e){return Object.prototype.toString.call(e).slice(8,-1)},objId:function(e){return e.__id||Object.defineProperty(e,"__id",{value:++t}),e.__id},clone:function n(e,i){var a,t,r=L.util.type(e);switch(i=i||{},r){case"Object":if(t=L.util.objId(e),i[t])return i[t];for(var o in a={},i[t]=a,e)e.hasOwnProperty(o)&&(a[o]=n(e[o],i));return a;case"Array":return t=L.util.objId(e),i[t]?i[t]:(a=[],i[t]=a,e.forEach(function(e,t){a[t]=n(e,i)}),a);default:return e}}},languages:{extend:function(e,t){var n=L.util.clone(L.languages[e]);for(var i in t)n[i]=t[i];return n},insertBefore:function(n,e,t,i){var a=(i=i||L.languages)[n],r={};for(var o in a)if(a.hasOwnProperty(o)){if(o==e)for(var s in t)t.hasOwnProperty(s)&&(r[s]=t[s]);t.hasOwnProperty(o)||(r[o]=a[o])}var l=i[n];return i[n]=r,L.languages.DFS(L.languages,function(e,t){t===l&&e!=n&&(this[e]=r)}),r},DFS:function e(t,n,i,a){a=a||{};var r=L.util.objId;for(var o in t)if(t.hasOwnProperty(o)){n.call(t,o,t[o],i||o);var s=t[o],l=L.util.type(s);"Object"!==l||a[r(s)]?"Array"!==l||a[r(s)]||(a[r(s)]=!0,e(s,n,o,a)):(a[r(s)]=!0,e(s,n,null,a))}}},plugins:{},highlightAll:function(e,t){L.highlightAllUnder(document,e,t)},highlightAllUnder:function(e,t,n){var i={callback:n,selector:'code[class*="language-"], [class*="language-"] code, code[class*="lang-"], [class*="lang-"] code'};L.hooks.run("before-highlightall",i);for(var a,r=i.elements||e.querySelectorAll(i.selector),o=0;a=r[o++];)L.highlightElement(a,!0===t,i.callback)},highlightElement:function(e,t,n){for(var i,a,r=e;r&&!u.test(r.className);)r=r.parentNode;r&&(i=(r.className.match(u)||[,""])[1].toLowerCase(),a=L.languages[i]),e.className=e.className.replace(u,"").replace(/\s+/g," ")+" language-"+i,e.parentNode&&(r=e.parentNode,/pre/i.test(r.nodeName)&&(r.className=r.className.replace(u,"").replace(/\s+/g," ")+" language-"+i));function o(e){s.highlightedCode=e,L.hooks.run("before-insert",s),s.element.innerHTML=s.highlightedCode,L.hooks.run("after-highlight",s),L.hooks.run("complete",s),n&&n.call(s.element)}var s={element:e,language:i,grammar:a,code:e.textContent};if(L.hooks.run("before-sanity-check",s),s.code)if(L.hooks.run("before-highlight",s),s.grammar)if(t&&c.Worker){var l=new Worker(L.filename);l.onmessage=function(e){o(e.data)},l.postMessage(JSON.stringify({language:s.language,code:s.code,immediateClose:!0}))}else o(L.highlight(s.code,s.grammar,s.language));else o(L.util.encode(s.code));else L.hooks.run("complete",s)},highlight:function(e,t,n){var i={code:e,grammar:t,language:n};return L.hooks.run("before-tokenize",i),i.tokens=L.tokenize(i.code,i.grammar),L.hooks.run("after-tokenize",i),C.stringify(L.util.encode(i.tokens),i.language)},matchGrammar:function(e,t,n,i,a,r,o){for(var s in n)if(n.hasOwnProperty(s)&&n[s]){if(s==o)return;var l=n[s];l="Array"===L.util.type(l)?l:[l];for(var c=0;c<l.length;++c){var u=l[c],d=u.inside,p=!!u.lookbehind,g=!!u.greedy,f=0,h=u.alias;if(g&&!u.pattern.global){var b=u.pattern.toString().match(/[imuy]*$/)[0];u.pattern=RegExp(u.pattern.source,b+"g")}u=u.pattern||u;for(var m=i,v=a;m<t.length;v+=t[m].length,++m){var y=t[m];if(t.length>e.length)return;if(!(y instanceof C)){if(g&&m!=t.length-1){if(u.lastIndex=v,!(E=u.exec(e)))break;for(var k=E.index+(p?E[1].length:0),w=E.index+E[0].length,x=m,F=v,A=t.length;x<A&&(F<w||!t[x].type&&!t[x-1].greedy);++x)(F+=t[x].length)<=k&&(++m,v=F);if(t[m]instanceof C)continue;O=x-m,y=e.slice(v,F),E.index-=v}else{u.lastIndex=0;var E=u.exec(y),O=1}if(E){p&&(f=E[1]?E[1].length:0);w=(k=E.index+f)+(E=E[0].slice(f)).length;var S=y.slice(0,k),N=y.slice(w),j=[m,O];S&&(++m,v+=S.length,j.push(S));var z=new C(s,d?L.tokenize(E,d):E,h,E,g);if(j.push(z),N&&j.push(N),Array.prototype.splice.apply(t,j),1!=O&&L.matchGrammar(e,t,n,m,v,!0,s),r)break}else if(r)break}}}}},tokenize:function(e,t){var n=[e],i=t.rest;if(i){for(var a in i)t[a]=i[a];delete t.rest}return L.matchGrammar(e,n,t,0,0,!1),n},hooks:{all:{},add:function(e,t){var n=L.hooks.all;n[e]=n[e]||[],n[e].push(t)},run:function(e,t){var n=L.hooks.all[e];if(n&&n.length)for(var i,a=0;i=n[a++];)i(t)}},Token:C};function C(e,t,n,i,a){this.type=e,this.content=t,this.alias=n,this.length=0|(i||"").length,this.greedy=!!a}if(c.Prism=L,C.stringify=function(t,n,e){if("string"==typeof t)return t;if(Array.isArray(t))return t.map(function(e){return C.stringify(e,n,t)}).join("");var i={type:t.type,content:C.stringify(t.content,n,e),tag:"span",classes:["token",t.type],attributes:{},language:n,parent:e};if(t.alias){var a=Array.isArray(t.alias)?t.alias:[t.alias];Array.prototype.push.apply(i.classes,a)}L.hooks.run("wrap",i);var r=Object.keys(i.attributes).map(function(e){return e+'="'+(i.attributes[e]||"").replace(/"/g,"&quot;")+'"'}).join(" ");return"<"+i.tag+' class="'+i.classes.join(" ")+'"'+(r?" "+r:"")+">"+i.content+"</"+i.tag+">"},!c.document)return c.addEventListener&&(L.disableWorkerMessageHandler||c.addEventListener("message",function(e){var t=JSON.parse(e.data),n=t.language,i=t.code,a=t.immediateClose;c.postMessage(L.highlight(i,L.languages[n],n)),a&&c.close()},!1)),L;var e=document.currentScript||[].slice.call(document.getElementsByTagName("script")).pop();return e&&(L.filename=e.src,L.manual||e.hasAttribute("data-manual")||("loading"!==document.readyState?window.requestAnimationFrame?window.requestAnimationFrame(L.highlightAll):window.setTimeout(L.highlightAll,16):document.addEventListener("DOMContentLoaded",L.highlightAll))),L}("undefined"!=typeof window?window:"undefined"!=typeof WorkerGlobalScope&&self instanceof WorkerGlobalScope?self:{});void 0!==t&&t.exports&&(t.exports=c),void 0!==e&&(e.Prism=c),c.languages.markup={comment:/<!--[\s\S]*?-->/,prolog:/<\?[\s\S]+?\?>/,doctype:/<!DOCTYPE[\s\S]+?>/i,cdata:/<!\[CDATA\[[\s\S]*?]]>/i,tag:{pattern:/<\/?(?!\d)[^\s>\/=$<%]+(?:\s(?:\s*[^\s>\/=]+(?:\s*=\s*(?:"[^"]*"|'[^']*'|[^\s'">=]+(?=[\s>]))|(?=[\s/>])))+)?\s*\/?>/i,greedy:!0,inside:{tag:{pattern:/^<\/?[^\s>\/]+/i,inside:{punctuation:/^<\/?/,namespace:/^[^\s>\/:]+:/}},"attr-value":{pattern:/=\s*(?:"[^"]*"|'[^']*'|[^\s'">=]+)/i,inside:{punctuation:[/^=/,{pattern:/^(\s*)["']|["']$/,lookbehind:!0}]}},punctuation:/\/?>/,"attr-name":{pattern:/[^\s>\/]+/,inside:{namespace:/^[^\s>\/:]+:/}}}},entity:/&#?[\da-z]{1,8};/i},c.languages.markup.tag.inside["attr-value"].inside.entity=c.languages.markup.entity,c.hooks.add("wrap",function(e){"entity"===e.type&&(e.attributes.title=e.content.replace(/&amp;/,"&"))}),Object.defineProperty(c.languages.markup.tag,"addInlined",{value:function(e,t){var n={};n["language-"+t]={pattern:/(^<!\[CDATA\[)[\s\S]+?(?=\]\]>$)/i,lookbehind:!0,inside:c.languages[t]},n.cdata=/^<!\[CDATA\[|\]\]>$/i;var i={"included-cdata":{pattern:/<!\[CDATA\[[\s\S]*?\]\]>/i,inside:n}};i["language-"+t]={pattern:/[\s\S]+/,inside:c.languages[t]};var a={};a[e]={pattern:RegExp(/(<__[\s\S]*?>)(?:<!\[CDATA\[[\s\S]*?\]\]>\s*|[\s\S])*?(?=<\/__>)/.source.replace(/__/g,e),"i"),lookbehind:!0,greedy:!0,inside:i},c.languages.insertBefore("markup","cdata",a)}}),c.languages.xml=c.languages.extend("markup",{}),c.languages.html=c.languages.markup,c.languages.mathml=c.languages.markup,c.languages.svg=c.languages.markup,function(e){var t=/("|')(?:\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1/;e.languages.css={comment:/\/\*[\s\S]*?\*\//,atrule:{pattern:/@[\w-]+?[\s\S]*?(?:;|(?=\s*\{))/i,inside:{rule:/@[\w-]+/}},url:RegExp("url\\((?:"+t.source+"|.*?)\\)","i"),selector:RegExp("[^{}\\s](?:[^{};\"']|"+t.source+")*?(?=\\s*\\{)"),string:{pattern:t,greedy:!0},property:/[-_a-z\xA0-\uFFFF][-\w\xA0-\uFFFF]*(?=\s*:)/i,important:/!important\b/i,function:/[-a-z0-9]+(?=\()/i,punctuation:/[(){};:,]/},e.languages.css.atrule.inside.rest=e.languages.css;var n=e.languages.markup;n&&(n.tag.addInlined("style","css"),e.languages.insertBefore("inside","attr-value",{"style-attr":{pattern:/\s*style=("|')(?:\\[\s\S]|(?!\1)[^\\])*\1/i,inside:{"attr-name":{pattern:/^\s*style/i,inside:n.tag.inside},punctuation:/^\s*=\s*['"]|['"]\s*$/,"attr-value":{pattern:/.+/i,inside:e.languages.css}},alias:"language-css"}},n.tag))}(c),c.languages.clike={comment:[{pattern:/(^|[^\\])\/\*[\s\S]*?(?:\*\/|$)/,lookbehind:!0},{pattern:/(^|[^\\:])\/\/.*/,lookbehind:!0,greedy:!0}],string:{pattern:/(["'])(?:\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1/,greedy:!0},"class-name":{pattern:/((?:\b(?:class|interface|extends|implements|trait|instanceof|new)\s+)|(?:catch\s+\())[\w.\\]+/i,lookbehind:!0,inside:{punctuation:/[.\\]/}},keyword:/\b(?:if|else|while|do|for|return|in|instanceof|function|new|try|throw|catch|finally|null|break|continue)\b/,boolean:/\b(?:true|false)\b/,function:/\w+(?=\()/,number:/\b0x[\da-f]+\b|(?:\b\d+\.?\d*|\B\.\d+)(?:e[+-]?\d+)?/i,operator:/--?|\+\+?|!=?=?|<=?|>=?|==?=?|&&?|\|\|?|\?|\*|\/|~|\^|%/,punctuation:/[{}[\];(),.:]/},c.languages.javascript=c.languages.extend("clike",{"class-name":[c.languages.clike["class-name"],{pattern:/(^|[^$\w\xA0-\uFFFF])[_$A-Z\xA0-\uFFFF][$\w\xA0-\uFFFF]*(?=\.(?:prototype|constructor))/,lookbehind:!0}],keyword:[{pattern:/((?:^|})\s*)(?:catch|finally)\b/,lookbehind:!0},{pattern:/(^|[^.])\b(?:as|async(?=\s*(?:function\b|\(|[$\w\xA0-\uFFFF]|$))|await|break|case|class|const|continue|debugger|default|delete|do|else|enum|export|extends|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)\b/,lookbehind:!0}],number:/\b(?:(?:0[xX][\dA-Fa-f]+|0[bB][01]+|0[oO][0-7]+)n?|\d+n|NaN|Infinity)\b|(?:\b\d+\.?\d*|\B\.\d+)(?:[Ee][+-]?\d+)?/,function:/[_$a-zA-Z\xA0-\uFFFF][$\w\xA0-\uFFFF]*(?=\s*(?:\.\s*(?:apply|bind|call)\s*)?\()/,operator:/-[-=]?|\+[+=]?|!=?=?|<<?=?|>>?>?=?|=(?:==?|>)?|&[&=]?|\|[|=]?|\*\*?=?|\/=?|~|\^=?|%=?|\?|\.{3}/}),c.languages.javascript["class-name"][0].pattern=/(\b(?:class|interface|extends|implements|instanceof|new)\s+)[\w.\\]+/,c.languages.insertBefore("javascript","keyword",{regex:{pattern:/((?:^|[^$\w\xA0-\uFFFF."'\])\s])\s*)\/(\[(?:[^\]\\\r\n]|\\.)*]|\\.|[^/\\\[\r\n])+\/[gimyu]{0,5}(?=\s*($|[\r\n,.;})\]]))/,lookbehind:!0,greedy:!0},"function-variable":{pattern:/[_$a-zA-Z\xA0-\uFFFF][$\w\xA0-\uFFFF]*(?=\s*[=:]\s*(?:async\s*)?(?:\bfunction\b|(?:\((?:[^()]|\([^()]*\))*\)|[_$a-zA-Z\xA0-\uFFFF][$\w\xA0-\uFFFF]*)\s*=>))/,alias:"function"},parameter:[{pattern:/(function(?:\s+[_$A-Za-z\xA0-\uFFFF][$\w\xA0-\uFFFF]*)?\s*\(\s*)(?!\s)(?:[^()]|\([^()]*\))+?(?=\s*\))/,lookbehind:!0,inside:c.languages.javascript},{pattern:/[_$a-z\xA0-\uFFFF][$\w\xA0-\uFFFF]*(?=\s*=>)/i,inside:c.languages.javascript},{pattern:/(\(\s*)(?!\s)(?:[^()]|\([^()]*\))+?(?=\s*\)\s*=>)/,lookbehind:!0,inside:c.languages.javascript},{pattern:/((?:\b|\s|^)(?!(?:as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)(?![$\w\xA0-\uFFFF]))(?:[_$A-Za-z\xA0-\uFFFF][$\w\xA0-\uFFFF]*\s*)\(\s*)(?!\s)(?:[^()]|\([^()]*\))+?(?=\s*\)\s*\{)/,lookbehind:!0,inside:c.languages.javascript}],constant:/\b[A-Z](?:[A-Z_]|\dx?)*\b/}),c.languages.insertBefore("javascript","string",{"template-string":{pattern:/`(?:\\[\s\S]|\${[^}]+}|[^\\`])*`/,greedy:!0,inside:{interpolation:{pattern:/\${[^}]+}/,inside:{"interpolation-punctuation":{pattern:/^\${|}$/,alias:"punctuation"},rest:c.languages.javascript}},string:/[\s\S]+/}}}),c.languages.markup&&c.languages.markup.tag.addInlined("script","javascript"),c.languages.js=c.languages.javascript,"undefined"!=typeof self&&self.Prism&&self.document&&document.querySelector&&(self.Prism.fileHighlight=function(e){e=e||document;var l={js:"javascript",py:"python",rb:"ruby",ps1:"powershell",psm1:"powershell",sh:"bash",bat:"batch",h:"c",tex:"latex"};Array.prototype.slice.call(e.querySelectorAll("pre[data-src]")).forEach(function(e){if(!e.hasAttribute("data-src-loaded")){for(var t,n=e.getAttribute("data-src"),i=e,a=/\blang(?:uage)?-([\w-]+)\b/i;i&&!a.test(i.className);)i=i.parentNode;if(i&&(t=(e.className.match(a)||[,""])[1]),!t){var r=(n.match(/\.(\w+)$/)||[,""])[1];t=l[r]||r}var o=document.createElement("code");o.className="language-"+t,e.textContent="",o.textContent="Loading…",e.appendChild(o);var s=new XMLHttpRequest;s.open("GET",n,!0),s.onreadystatechange=function(){4==s.readyState&&(s.status<400&&s.responseText?(o.textContent=s.responseText,c.highlightElement(o),e.setAttribute("data-src-loaded","")):400<=s.status?o.textContent="✖ Error "+s.status+" while fetching file: "+s.statusText:o.textContent="✖ Error: File does not exist or is empty")},s.send(null)}}),c.plugins.toolbar&&c.plugins.toolbar.registerButton("download-file",function(e){var t=e.element.parentNode;if(t&&/pre/i.test(t.nodeName)&&t.hasAttribute("data-src")&&t.hasAttribute("data-download-link")){var n=t.getAttribute("data-src"),i=document.createElement("a");return i.textContent=t.getAttribute("data-download-link-label")||"Download",i.setAttribute("download",""),i.href=n,i}})},document.addEventListener("DOMContentLoaded",function(){self.Prism.fileHighlight()}))}).call(e,function(){return this}())},function(e,t){e.exports={from:function(e,t){function i(e,t){r[e]&&(c("deactivate",u(o,t)),o=r[e],c("activate",u(o,t)))}function n(e,t){var n=r.indexOf(o)+e;c(0<e?"next":"prev",u(o,t))&&i(n,t)}var a=1===(e.parent||e).nodeType?e.parent||e:document.querySelector(e.parent||e),r=[].filter.call("string"==typeof e.slides?a.querySelectorAll(e.slides):e.slides||a.children,function(e){return"SCRIPT"!==e.nodeName}),o=r[0],s={},l=function(e,t){s[e]=(s[e]||[]).filter(function(e){return e!==t})},c=function(e,n){return(s[e]||[]).reduce(function(e,t){return e&&!1!==t(n)},!0)},u=function(e,t){return(t=t||{}).index=r.indexOf(e),t.slide=e,t},d={on:function(e,t){return(s[e]||(s[e]=[])).push(t),l.bind(null,e,t)},off:l,fire:c,slide:function(e,t){if(!arguments.length)return r.indexOf(o);c("slide",u(r[e],t))&&i(e,t)},next:n.bind(null,1),prev:n.bind(null,-1),parent:a,slides:r};return(t||[]).forEach(function(e){e(d)}),i(0),d}}},function(e,t,n){var i;i=function(){return function i(a,r,o){function s(n,e){if(!r[n]){if(!a[n]){if(l)return l(n,!0);throw new Error("Cannot find module '"+n+"'")}var t=r[n]={exports:{}};a[n][0].call(t.exports,function(e){var t=a[n][1][e];return s(t||e)},t,t.exports,i,a,r,o)}return r[n].exports}for(var l=!1,e=0;e<o.length;e++)s(o[e]);return s}({1:[function(e,t,n){var i=e("bespoke-classes"),a=e("insert-css");t.exports=function(){return a('/*! normalize.css v3.0.0 | MIT License | git.io/normalize */html{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:0}article,aside,details,figcaption,figure,footer,header,hgroup,main,nav,section,summary{display:block}audio,canvas,progress,video{display:inline-block;vertical-align:baseline}audio:not([controls]){display:none;height:0}[hidden],template{display:none}a{background:0 0}a:active,a:hover{outline:0}abbr[title]{border-bottom:1px dotted}b{font-weight:700}dfn{font-style:italic}h1{font-size:2em}mark{background:#ff0;color:#000}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sup{top:-.5em}sub{bottom:-.25em}img{border:0}svg:not(:root){overflow:hidden}figure{margin:1em 40px}hr{box-sizing:content-box}pre{overflow:auto}code,kbd,pre,samp{font-size:1em}kbd,pre,samp{font-family:monospace,monospace}button,input,optgroup,select,textarea{color:inherit;font:inherit;margin:0}button{overflow:visible}button,select{text-transform:none}button,html input[type="button"],input[type="reset"],input[type="submit"]{-webkit-appearance:button;cursor:pointer}button[disabled],html input[disabled]{cursor:default}button::-moz-focus-inner,input::-moz-focus-inner{border:0;padding:0}input{line-height:normal}input[type="checkbox"],input[type="radio"]{box-sizing:border-box;padding:0}input[type="number"]::-webkit-inner-spin-button,input[type="number"]::-webkit-outer-spin-button{height:auto}input[type="search"]{-webkit-appearance:textfield;box-sizing:content-box}input[type="search"]::-webkit-search-cancel-button,input[type="search"]::-webkit-search-decoration{-webkit-appearance:none}fieldset{border:1px solid silver;margin:0 2px;padding:.35em .625em .75em}legend{border:0;padding:0}textarea{overflow:auto}optgroup{font-weight:700}table{border-collapse:collapse;border-spacing:0}td,th,*{padding:0}*{margin:0}html{-webkit-text-size-adjust:auto;-ms-text-size-adjust:auto;text-size-adjust:auto}.bespoke-parent{font-size:1.5em;background:#111;color:#ddd;font-family:futura,helvetica,arial,arial,sans-serif;overflow:hidden;text-align:center;-webkit-transition:background 1s ease;transition:background 1s ease;background-position:50% 50%}.bespoke-parent,.bespoke-scale-parent{position:absolute;top:0;left:0;right:0;bottom:0}.bespoke-scale-parent{pointer-events:none;z-index:1}.bespoke-scale-parent .bespoke-active{pointer-events:auto}.bespoke-slide{-webkit-transition:opacity .5s ease;transition:opacity .5s ease;width:940px;height:480px;position:absolute;top:50%;left:50%;margin-left:-470px;margin-top:-240px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-box-align:center;-webkit-align-items:center;-ms-flex-align:center;align-items:center;z-index:1}.bespoke-active{-webkit-transition-delay:.5s;transition-delay:.5s}.bespoke-active[data-bespoke-backdrop]{-webkit-transition-delay:.75s;transition-delay:.75s}.bespoke-inactive{opacity:0;pointer-events:none}.bespoke-backdrop{-webkit-transition:opacity 1s ease;position:absolute;top:0;left:0;right:0;bottom:0}.bespoke-progress-parent{position:absolute;top:0;left:0;right:0;height:.3vw;z-index:1}.bespoke-progress-bar{background:#ddd;position:absolute;top:0;left:0;height:100%;-webkit-transition:width 1s ease;transition:width 1s ease}.bespoke-bullet{-webkit-transition:opacity .3s ease;transition:opacity .3s ease}.bespoke-bullet-inactive{opacity:0}strong{font-weight:400}hr{width:50%;margin:1rem auto;height:1px;border:0;background:#ddd}h3,p,li{padding-left:20px;padding-right:20px}h3,h4,p,li,pre{font-weight:200}h1{line-height:1.4em;padding:1em;border:1px solid #ddd;border-left-width:0;border-right-width:0;min-width:8em}h1,h2{letter-spacing:.3em;text-transform:uppercase;font-weight:400;margin:.17em 0;position:relative}h2{line-height:1.1em;padding:0 0 0 .3em}h3{font-family:didot,times new roman,serif;font-style:italic;font-size:1.2em;line-height:1.6em;margin:.5em 0}h4{text-transform:uppercase;font-size:.8em;line-height:1.8em;letter-spacing:.3em;margin:1em 0}ul,ol{padding:0;margin:0;text-align:left}li{list-style:none;margin:.2em;font-style:normal;-webkit-transform:translateX(-6px);-ms-transform:translateX(-6px);transform:translateX(-6px)}li:before{content:\'\\2014\';margin-right:4px}pre{background:none!important}code{font-family:prestige elite std,consolas,courier new,monospace!important;font-style:normal;font-weight:200!important;text-align:left}a{padding-left:.3em;color:currentColor;text-decoration:none;border-bottom:1px solid currentColor}.emphatic{background:#f30}.single-words{word-spacing:9999px;line-height:2.9em;overflow:hidden}.bespoke-backdrop{opacity:0;-webkit-transition:opacity 1s ease,-webkit-transform 6s ease;transition:opacity 1s ease,transform 6s ease;background-size:cover;background-position:50% 50%;-webkit-transform:translateZ(0)scale(1.3);transform:translateZ(0)scale(1.3)}.bespoke-backdrop-active,.bespoke-backdrop-before{-webkit-transform:translateZ(0);transform:translateZ(0)}.bespoke-backdrop-before{-webkit-transition-delay:.2s;transition-delay:.2s}.bespoke-backdrop-active{opacity:.5}',{prepend:!0}),function(e){i()(e)}}},{"bespoke-classes":2,"insert-css":3}],2:[function(e,t,n){t.exports=function(){return function(r){function o(e,t){e.classList.add("bespoke-"+t)}function s(e,t){e.className=e.className.replace(new RegExp("bespoke-"+t+"(\\s|$)","g")," ").trim()}function t(e,t){var n=r.slides[r.slide()],i=t-r.slide(),a=0<i?"after":"before";["before(-\\d+)?","after(-\\d+)?","active","inactive"].map(s.bind(null,e)),e!==n&&["inactive",a,a+"-"+Math.abs(i)].map(o.bind(null,e))}o(r.parent,"parent"),r.slides.map(function(e){o(e,"slide")}),r.on("activate",function(e){r.slides.map(t),o(e.slide,"active"),s(e.slide,"inactive")})}}},{}],3:[function(e,t,n){var a={};t.exports=function(e,t){if(!a[e]){a[e]=!0;var n=document.createElement("style");n.setAttribute("type","text/css"),"textContent"in n?n.textContent=e:n.styleSheet.cssText=e;var i=document.getElementsByTagName("head")[0];t&&t.prepend?i.insertBefore(n,i.childNodes[0]):i.appendChild(n)}}},{}]},{},[1])(1)},e.exports=i()},function(e,t){e.exports=function(e){return function(t){var n="vertical"!==e;document.addEventListener("keydown",function(e){(34==e.which||32==e.which&&!e.shiftKey||n&&39==e.which||!n&&40==e.which)&&t.next(),(33==e.which||32==e.which&&e.shiftKey||n&&37==e.which||!n&&38==e.which)&&t.prev()})}}},function(e,t){e.exports=function(a){return function(e){var t,n,i="vertical"==a?"Y":"X";e.parent.addEventListener("touchstart",function(e){1==e.touches.length&&(t=e.touches[0]["page"+i],n=0)}),e.parent.addEventListener("touchmove",function(e){1==e.touches.length&&(e.preventDefault(),n=e.touches[0]["page"+i]-t)}),e.parent.addEventListener("touchend",function(){50<Math.abs(n)&&e[0<n?"prev":"next"]()})}}},function(e,t){e.exports=function(o){return function(e){var t,n,r=e.slides.map(function(e){return[].slice.call(e.querySelectorAll("string"==typeof o?o:"[data-bespoke-bullet]"),0)}),i=function(i,a){t=i,n=a,r.forEach(function(e,n){e.forEach(function(e,t){e.classList.add("bespoke-bullet"),n<i||n===i&&t<=a?(e.classList.add("bespoke-bullet-active"),e.classList.remove("bespoke-bullet-inactive")):(e.classList.add("bespoke-bullet-inactive"),e.classList.remove("bespoke-bullet-active")),n===i&&t===a?e.classList.add("bespoke-bullet-current"):e.classList.remove("bespoke-bullet-current")})})},a=function(e){return void 0!==r[t][n+e]};e.on("next",function(){var e=t+1;if(a(1))return i(t,n+1),!1;r[e]&&i(e,0)}),e.on("prev",function(){var e=t-1;if(a(-1))return i(t,n-1),!1;r[e]&&i(e,r[e].length-1)}),e.on("slide",function(e){i(e.index,0)}),i(0,0)}}},function(e,t){e.exports=function(){return function(i){var a;function e(e){if(e){var t=a.indexOf(e),n=i.slide();r(e,"active"),r(e,"inactive"),r(e,"before"),r(e,"after"),t!==n?(o(e,"inactive"),o(e,t<n?"before":"after")):o(e,"active")}}function r(e,t){e.classList.remove("bespoke-backdrop-"+t)}function o(e,t){e.classList.add("bespoke-backdrop-"+t)}a=i.slides.map(function(e){var t=e.getAttribute("data-bespoke-backdrop");if(t){var n=document.createElement("div");return n.className=t,n.classList.add("bespoke-backdrop"),i.parent.appendChild(n),n}}),i.on("activate",function(){a.forEach(e)})}}},function(e,t){e.exports=function(d){return function(e){function t(){var e=i.offsetWidth/o,t=i.offsetHeight/r;l.forEach(u.bind(null,Math.min(e,t)))}var n,i=e.parent,a=e.slides[0],r=a.offsetHeight,o=a.offsetWidth,s="zoom"===d||"zoom"in i.style&&"transform"!==d,l=s?e.slides:e.slides.map(function(e){var t=document.createElement("div");return t.className="bespoke-scale-parent",e.parentNode.insertBefore(t,e),t.appendChild(e),t}),c=(n="Transform","Moz Webkit O ms".split(" ").reduce(function(e,t){return t+n in i.style?t+n:e},n.toLowerCase())),u=s?function(e,t){t.style.zoom=e}:function(e,t){t.style[c]="scale("+e+")"};window.addEventListener("resize",t),t()}}},function(e,t){e.exports=function(){return function(i){function a(e){var t=-1<e&&e<i.slides.length?e:0;t!==i.slide()&&i.slide(t)}function e(){var n=window.location.hash.slice(1),e=parseInt(n,10);n&&(e?a(e-1):i.slides.forEach(function(e,t){e.getAttribute("data-bespoke-hash")!==n&&e.id!==n||a(t)}))}setTimeout(function(){e(),i.on("activate",function(e){var t=e.slide.getAttribute("data-bespoke-hash")||e.slide.id;window.location.hash=t||e.index+1}),window.addEventListener("hashchange",e)},0)}}},function(e,t){e.exports=function(a){return function(t){var e=document.createElement("div"),n=document.createElement("div"),i="vertical"===a?"height":"width";e.className="bespoke-progress-parent",n.className="bespoke-progress-bar",e.appendChild(n),t.parent.appendChild(e),t.on("activate",function(e){n.style[i]=100*e.index/(t.slides.length-1)+"%"})}}},function(e,t,n){var i=Function("return this")(),r=(i.bespoke&&i.bespoke.plugins&&i.bespoke.plugins.convenient||n(12)).builder("indexfinger");e.exports=function(e){return function(e){r.activateDeck(e);var t={},n=null,i=-1,a={enableActiveSlideListener:function(){t.saveActiveSlide=this.on("activate",a.saveActiveSlide.bind(this))},saveActiveSlide:function(e){n=e.slide,i=e.index},getActiveSlide:function(){return n},getActiveSlideIndex:function(){return i}};e.getActiveSlide=a.getActiveSlide.bind(e),e.getActiveSlideIndex=a.getActiveSlideIndex.bind(e),a.enableActiveSlideListener.call(e)}}},function(e,t){function l(e){!function(t){if(!t)throw c.generateErrorObject("deck must be defined.");return a.some(function(e){return e.deck===t})}(e)&&a.push({deck:e,storage:{}})}var c,n,u=Function("return this")(),i={logger:{log:function(){console.log.apply(console,arguments)}}},d={},a=[];d.builder=function(t){if(!t)throw c.generateErrorObject("The plugin options were not properly defined.");if("string"==typeof t&&(t={pluginName:t}),"string"!=typeof t.pluginName)throw c.generateErrorObject("The plugin name was not properly defined.");function r(e,t,n,i,a,r){return d.createEventData.call(e,t,n,i,a,r)}function e(e,t,n,i,a){return e.fire(function(e){return s+"."+e}(t),r(e,s,t,n,i,a))}function n(e){if(function(e,t){if(!e)throw c.generateErrorObject("pluginName must be defined.");if(!t)throw c.generateErrorObject("deck must be defined.");var n=d.getDeckStorage(t);return!(!n||!n[e])}(t.pluginName,e))throw c.generateErrorObject("The '"+t.pluginName+"' plugin has already been activated for this deck, can't activate it twice.")}function i(e){return n(e),function(e,t){if(!e)throw c.generateErrorObject("pluginName must be defined.");if(!t)throw c.generateErrorObject("deck must be defined.");var n=d.getDeckStorage(t);n||(l(t),n=d.getDeckStorage(t)),n[e]={}}(t.pluginName,e),function(e){var t={};return t.createEventData=a.createEventData.bind(this,e),t.fire=a.fire.bind(this,e),t.getStorage=a.getStorage.bind(this,e),t.log=a.log.bind(this,e),t}(e)}var a={},o="bespoke."+t.pluginName,s=t.pluginName;return function(){a.createEventData=r.bind(this),a.generateErrorObject=function(e){return new Error(o+": "+e)}.bind(this),a.fire=e.bind(this),a.log=function(){var e=[o];u.convenientOptions.logger.log.apply(u.convenientOptions.logger.log,e.concat(d.copyArray(arguments)))}.bind(this),a.activateDeck=i.bind(this),a.getStorage=d.getDeckPluginStorage.bind(this,t.pluginName)}(),a},d.getDeckStorage=function(t){if(!t)throw c.generateErrorObject("deck must be defined.");var n=null;return a.some(function(e){return e.deck===t&&(n=e.storage,!0)}),n},d.getDeckPluginStorage=function(e,t){if(!e)throw c.generateErrorObject("pluginName must be defined.");if(!t)throw c.generateErrorObject("deck must be defined.");var n=d.getDeckStorage(t);if(!n)throw c.generateErrorObject("storage was not initiated for this deck.");return n[e]},d.createEventData=function(e,t,n,i,a){return(a=a||{}).eventNamespace=e||null,a.eventName=t||null,a.innerEvent=n||null,!function(e){return!isNaN(parseFloat(e))&&isFinite(e)}(i)?(a.index=this.slides.indexOf(i),a.slide=i):(a.index=i,a.slide=this.slides[i]),a},d.copyArray=function(e){return[].slice.call(e,0)},c=d.builder("convenient"),(n={logger:{}}).logger.log=u.convenientOptions&&u.convenientOptions.logger&&u.convenientOptions.logger.log||i.logger.log,u.convenientOptions=n,e.exports=d},function(e,t,n){function c(){return"secondary-window-"+function(e,t){var n;return void 0===t&&(t=e,e=0),n=t-e,e+Math.floor(Math.random()*n)}(1e3,1e4)}var i="secondary",a=Function("return this")(),u=a.bespoke&&a.bespoke.plugins&&a.bespoke.plugins.convenient||n(12),d=u.builder(i),p=(a.bespoke&&a.bespoke.plugins&&a.bespoke.plugins.indexfinger||n(11),{notes:"aside",keys:{toggle:83}});e.exports=function(l){return function(n){function e(e){var t=!1;return e.altKey||e.ctrlKey||e.metaKey||e.shiftKey||(t=t||e.which===l.keys.toggle&&r.fire("toggle",e)&&n.secondary.toggle()&&n.secondary.synchronize()),t&&e.preventDefault(),!t}function t(){return n.secondary.close(),null}function i(){n.secondary.synchronize()}var a,r=d.activateDeck(n),o={},s={getNotesElement:function(){return this.secondary.window&&this.secondary.window.document&&this.secondary.window.document.getElementById("notes")},isOpen:function(){var e=this.secondary,t=e.window;return!(void 0===e||null===t||!0===t.closed||t.opener!==window||null===this.secondary.getNotesElement())},open:function(){return this.secondary.isOpen()||(this.secondary.window=window.open(),function(e){e.body.innerHTML="<h1>Notes</h1><div id='notes'></div>"}(this.secondary.window.document)),this.secondary.isOpen()},close:function(){return this.secondary.isOpen()&&this.secondary.window.close(),!this.secondary.isOpen()},focus:function(){return this.secondary.isOpen()&&this.secondary.window.focus(),this.secondary.isOpen()},toggle:function(){return this.secondary.isOpen()?this.secondary.close():this.secondary.open(),this.secondary.isOpen()},synchronize:function(){var e,t,n;return!!this.secondary.isOpen()&&(e=this.secondary.getNotesElement(),t=this.getActiveSlide(),n=u.copyArray(t.querySelectorAll(l.notes)).reduce(function(e,t){return e+t.outerHTML},""),e.innerHTML=n,this.secondary.isOpen())}};l=l||{},(a={}).keys={},a.keys.toggle=l.keys&&l.keys.toggle||p.keys.toggle,a.notes=l.notes||p.notes,l=a,n.secondary={window:null,secondaryWindowName:c(),getNotesElement:s.getNotesElement.bind(n),isOpen:s.isOpen.bind(n),open:s.open.bind(n),close:s.close.bind(n),focus:s.focus.bind(n),toggle:s.toggle.bind(n),synchronize:s.synchronize.bind(n)},window.onbeforeunload=t,document.addEventListener("keydown",e,!1),o.activate=n.on("activate",i)}}}]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
