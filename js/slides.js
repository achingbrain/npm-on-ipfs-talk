"use strict";!function(n){var i={};function r(e){if(i[e])return i[e].exports;var t=i[e]={exports:{},id:e,loaded:!1};return n[e].call(t.exports,t,t.exports,r),t.loaded=!0,t.exports}r.m=n,r.c=i,r.p="",r(0)}([function(e,t,n){n(1);var i=n(2),r=n(3),a=n(4),o=n(5),s=n(6),l=n(7),c=n(8),u=n(9),d=n(10),p=n(11),g=n(13),f=[r(),a(),o(),s(".delayed, .bullet"),l(),c(),u(),d(),p(),g()];try{n(!function(){var e=new Error('Cannot find module "plugins"');throw e.code="MODULE_NOT_FOUND",e}())(f)}catch(e){}var h=i.from("article",f);try{n(!function(){var e=new Error('Cannot find module "deck"');throw e.code="MODULE_NOT_FOUND",e}())(h)}catch(e){}},function(t,e){(function(e){var c="undefined"!=typeof window?window:"undefined"!=typeof WorkerGlobalScope&&self instanceof WorkerGlobalScope?self:{},u=function(){var l=/\blang(?:uage)?-([\w-]+)\b/i,t=0,C=c.Prism={manual:c.Prism&&c.Prism.manual,disableWorkerMessageHandler:c.Prism&&c.Prism.disableWorkerMessageHandler,util:{encode:function(e){return e instanceof o?new o(e.type,C.util.encode(e.content),e.alias):"Array"===C.util.type(e)?e.map(C.util.encode):e.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/\u00a0/g," ")},type:function(e){return Object.prototype.toString.call(e).match(/\[object (\w+)\]/)[1]},objId:function(e){return e.__id||Object.defineProperty(e,"__id",{value:++t}),e.__id},clone:function(e,n){var t=C.util.type(e);switch(n=n||{},t){case"Object":if(n[C.util.objId(e)])return n[C.util.objId(e)];r={};for(var i in n[C.util.objId(e)]=r,e)e.hasOwnProperty(i)&&(r[i]=C.util.clone(e[i],n));return r;case"Array":if(n[C.util.objId(e)])return n[C.util.objId(e)];var r=[];return n[C.util.objId(e)]=r,e.forEach(function(e,t){r[t]=C.util.clone(e,n)}),r}return e}},languages:{extend:function(e,t){var n=C.util.clone(C.languages[e]);for(var i in t)n[i]=t[i];return n},insertBefore:function(n,e,t,i){var r=(i=i||C.languages)[n];if(2==arguments.length){for(var a in t=e)t.hasOwnProperty(a)&&(r[a]=t[a]);return r}var o={};for(var s in r)if(r.hasOwnProperty(s)){if(s==e)for(var a in t)t.hasOwnProperty(a)&&(o[a]=t[a]);o[s]=r[s]}return C.languages.DFS(C.languages,function(e,t){t===i[n]&&e!=n&&(this[e]=o)}),i[n]=o},DFS:function(e,t,n,i){for(var r in i=i||{},e)e.hasOwnProperty(r)&&(t.call(e,r,e[r],n||r),"Object"!==C.util.type(e[r])||i[C.util.objId(e[r])]?"Array"!==C.util.type(e[r])||i[C.util.objId(e[r])]||(i[C.util.objId(e[r])]=!0,C.languages.DFS(e[r],t,r,i)):(i[C.util.objId(e[r])]=!0,C.languages.DFS(e[r],t,null,i)))}},plugins:{},highlightAll:function(e,t){C.highlightAllUnder(document,e,t)},highlightAllUnder:function(e,t,n){var i={callback:n,selector:'code[class*="language-"], [class*="language-"] code, code[class*="lang-"], [class*="lang-"] code'};C.hooks.run("before-highlightall",i);for(var r,a=i.elements||e.querySelectorAll(i.selector),o=0;r=a[o++];)C.highlightElement(r,!0===t,i.callback)},highlightElement:function(e,t,n){for(var i,r,a=e;a&&!l.test(a.className);)a=a.parentNode;a&&(i=(a.className.match(l)||[,""])[1].toLowerCase(),r=C.languages[i]),e.className=e.className.replace(l,"").replace(/\s+/g," ")+" language-"+i,e.parentNode&&(a=e.parentNode,/pre/i.test(a.nodeName)&&(a.className=a.className.replace(l,"").replace(/\s+/g," ")+" language-"+i));var o={element:e,language:i,grammar:r,code:e.textContent};if(C.hooks.run("before-sanity-check",o),!o.code||!o.grammar)return o.code&&(C.hooks.run("before-highlight",o),o.element.textContent=o.code,C.hooks.run("after-highlight",o)),void C.hooks.run("complete",o);if(C.hooks.run("before-highlight",o),t&&c.Worker){var s=new Worker(C.filename);s.onmessage=function(e){o.highlightedCode=e.data,C.hooks.run("before-insert",o),o.element.innerHTML=o.highlightedCode,n&&n.call(o.element),C.hooks.run("after-highlight",o),C.hooks.run("complete",o)},s.postMessage(JSON.stringify({language:o.language,code:o.code,immediateClose:!0}))}else o.highlightedCode=C.highlight(o.code,o.grammar,o.language),C.hooks.run("before-insert",o),o.element.innerHTML=o.highlightedCode,n&&n.call(e),C.hooks.run("after-highlight",o),C.hooks.run("complete",o)},highlight:function(e,t,n){var i={code:e,grammar:t,language:n};return C.hooks.run("before-tokenize",i),i.tokens=C.tokenize(i.code,i.grammar),C.hooks.run("after-tokenize",i),o.stringify(C.util.encode(i.tokens),i.language)},matchGrammar:function(e,t,n,i,r,a,o){var s=C.Token;for(var l in n)if(n.hasOwnProperty(l)&&n[l]){if(l==o)return;var c=n[l];c="Array"===C.util.type(c)?c:[c];for(var u=0;u<c.length;++u){var d=c[u],p=d.inside,g=!!d.lookbehind,f=!!d.greedy,h=0,b=d.alias;if(f&&!d.pattern.global){var m=d.pattern.toString().match(/[imuy]*$/)[0];d.pattern=RegExp(d.pattern.source,m+"g")}d=d.pattern||d;for(var v=i,y=r;v<t.length;y+=t[v].length,++v){var k=t[v];if(t.length>e.length)return;if(!(k instanceof s)){if(f&&v!=t.length-1){if(d.lastIndex=y,!(O=d.exec(e)))break;for(var w=O.index+(g?O[1].length:0),x=O.index+O[0].length,E=v,A=y,S=t.length;E<S&&(A<x||!t[E].type&&!t[E-1].greedy);++E)(A+=t[E].length)<=w&&(++v,y=A);if(t[v]instanceof s)continue;N=E-v,k=e.slice(y,A),O.index-=y}else{d.lastIndex=0;var O=d.exec(k),N=1}if(O){g&&(h=O[1]?O[1].length:0);x=(w=O.index+h)+(O=O[0].slice(h)).length;var j=k.slice(0,w),F=k.slice(x),z=[v,N];j&&(++v,y+=j.length,z.push(j));var L=new s(l,p?C.tokenize(O,p):O,b,O,f);if(z.push(L),F&&z.push(F),Array.prototype.splice.apply(t,z),1!=N&&C.matchGrammar(e,t,n,v,y,!0,l),a)break}else if(a)break}}}}},tokenize:function(e,t,n){var i=[e],r=t.rest;if(r){for(var a in r)t[a]=r[a];delete t.rest}return C.matchGrammar(e,i,t,0,0,!1),i},hooks:{all:{},add:function(e,t){var n=C.hooks.all;n[e]=n[e]||[],n[e].push(t)},run:function(e,t){var n=C.hooks.all[e];if(n&&n.length)for(var i,r=0;i=n[r++];)i(t)}}},o=C.Token=function(e,t,n,i,r){this.type=e,this.content=t,this.alias=n,this.length=0|(i||"").length,this.greedy=!!r};if(o.stringify=function(t,n,e){if("string"==typeof t)return t;if("Array"===C.util.type(t))return t.map(function(e){return o.stringify(e,n,t)}).join("");var i={type:t.type,content:o.stringify(t.content,n,e),tag:"span",classes:["token",t.type],attributes:{},language:n,parent:e};if(t.alias){var r="Array"===C.util.type(t.alias)?t.alias:[t.alias];Array.prototype.push.apply(i.classes,r)}C.hooks.run("wrap",i);var a=Object.keys(i.attributes).map(function(e){return e+'="'+(i.attributes[e]||"").replace(/"/g,"&quot;")+'"'}).join(" ");return"<"+i.tag+' class="'+i.classes.join(" ")+'"'+(a?" "+a:"")+">"+i.content+"</"+i.tag+">"},!c.document)return c.addEventListener&&(C.disableWorkerMessageHandler||c.addEventListener("message",function(e){var t=JSON.parse(e.data),n=t.language,i=t.code,r=t.immediateClose;c.postMessage(C.highlight(i,C.languages[n],n)),r&&c.close()},!1)),c.Prism;var e=document.currentScript||[].slice.call(document.getElementsByTagName("script")).pop();return e&&(C.filename=e.src,C.manual||e.hasAttribute("data-manual")||("loading"!==document.readyState?window.requestAnimationFrame?window.requestAnimationFrame(C.highlightAll):window.setTimeout(C.highlightAll,16):document.addEventListener("DOMContentLoaded",C.highlightAll))),c.Prism}();void 0!==t&&t.exports&&(t.exports=u),void 0!==e&&(e.Prism=u),u.languages.markup={comment:/<!--[\s\S]*?-->/,prolog:/<\?[\s\S]+?\?>/,doctype:/<!DOCTYPE[\s\S]+?>/i,cdata:/<!\[CDATA\[[\s\S]*?]]>/i,tag:{pattern:/<\/?(?!\d)[^\s>\/=$<%]+(?:\s+[^\s>\/=]+(?:=(?:("|')(?:\\[\s\S]|(?!\1)[^\\])*\1|[^\s'">=]+))?)*\s*\/?>/i,greedy:!0,inside:{tag:{pattern:/^<\/?[^\s>\/]+/i,inside:{punctuation:/^<\/?/,namespace:/^[^\s>\/:]+:/}},"attr-value":{pattern:/=(?:("|')(?:\\[\s\S]|(?!\1)[^\\])*\1|[^\s'">=]+)/i,inside:{punctuation:[/^=/,{pattern:/(^|[^\\])["']/,lookbehind:!0}]}},punctuation:/\/?>/,"attr-name":{pattern:/[^\s>\/]+/,inside:{namespace:/^[^\s>\/:]+:/}}}},entity:/&#?[\da-z]{1,8};/i},u.languages.markup.tag.inside["attr-value"].inside.entity=u.languages.markup.entity,u.hooks.add("wrap",function(e){"entity"===e.type&&(e.attributes.title=e.content.replace(/&amp;/,"&"))}),u.languages.xml=u.languages.markup,u.languages.html=u.languages.markup,u.languages.mathml=u.languages.markup,u.languages.svg=u.languages.markup,u.languages.css={comment:/\/\*[\s\S]*?\*\//,atrule:{pattern:/@[\w-]+?.*?(?:;|(?=\s*\{))/i,inside:{rule:/@[\w-]+/}},url:/url\((?:(["'])(?:\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1|.*?)\)/i,selector:/[^{}\s][^{};]*?(?=\s*\{)/,string:{pattern:/("|')(?:\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1/,greedy:!0},property:/[-_a-z\xA0-\uFFFF][-\w\xA0-\uFFFF]*(?=\s*:)/i,important:/\B!important\b/i,function:/[-a-z0-9]+(?=\()/i,punctuation:/[(){};:]/},u.languages.css.atrule.inside.rest=u.languages.css,u.languages.markup&&(u.languages.insertBefore("markup","tag",{style:{pattern:/(<style[\s\S]*?>)[\s\S]*?(?=<\/style>)/i,lookbehind:!0,inside:u.languages.css,alias:"language-css",greedy:!0}}),u.languages.insertBefore("inside","attr-value",{"style-attr":{pattern:/\s*style=("|')(?:\\[\s\S]|(?!\1)[^\\])*\1/i,inside:{"attr-name":{pattern:/^\s*style/i,inside:u.languages.markup.tag.inside},punctuation:/^\s*=\s*['"]|['"]\s*$/,"attr-value":{pattern:/.+/i,inside:u.languages.css}},alias:"language-css"}},u.languages.markup.tag)),u.languages.clike={comment:[{pattern:/(^|[^\\])\/\*[\s\S]*?(?:\*\/|$)/,lookbehind:!0},{pattern:/(^|[^\\:])\/\/.*/,lookbehind:!0,greedy:!0}],string:{pattern:/(["'])(?:\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1/,greedy:!0},"class-name":{pattern:/((?:\b(?:class|interface|extends|implements|trait|instanceof|new)\s+)|(?:catch\s+\())[\w.\\]+/i,lookbehind:!0,inside:{punctuation:/[.\\]/}},keyword:/\b(?:if|else|while|do|for|return|in|instanceof|function|new|try|throw|catch|finally|null|break|continue)\b/,boolean:/\b(?:true|false)\b/,function:/[a-z0-9_]+(?=\()/i,number:/\b0x[\da-f]+\b|(?:\b\d+\.?\d*|\B\.\d+)(?:e[+-]?\d+)?/i,operator:/--?|\+\+?|!=?=?|<=?|>=?|==?=?|&&?|\|\|?|\?|\*|\/|~|\^|%/,punctuation:/[{}[\];(),.:]/},u.languages.javascript=u.languages.extend("clike",{keyword:/\b(?:as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|var|void|while|with|yield)\b/,number:/\b(?:0[xX][\dA-Fa-f]+|0[bB][01]+|0[oO][0-7]+|NaN|Infinity)\b|(?:\b\d+\.?\d*|\B\.\d+)(?:[Ee][+-]?\d+)?/,function:/[_$a-z\xA0-\uFFFF][$\w\xA0-\uFFFF]*(?=\s*\()/i,operator:/-[-=]?|\+[+=]?|!=?=?|<<?=?|>>?>?=?|=(?:==?|>)?|&[&=]?|\|[|=]?|\*\*?=?|\/=?|~|\^=?|%=?|\?|\.{3}/}),u.languages.insertBefore("javascript","keyword",{regex:{pattern:/((?:^|[^$\w\xA0-\uFFFF."'\])\s])\s*)\/(\[[^\]\r\n]+]|\\.|[^/\\\[\r\n])+\/[gimyu]{0,5}(?=\s*($|[\r\n,.;})\]]))/,lookbehind:!0,greedy:!0},"function-variable":{pattern:/[_$a-z\xA0-\uFFFF][$\w\xA0-\uFFFF]*(?=\s*=\s*(?:function\b|(?:\([^()]*\)|[_$a-z\xA0-\uFFFF][$\w\xA0-\uFFFF]*)\s*=>))/i,alias:"function"},constant:/\b[A-Z][A-Z\d_]*\b/}),u.languages.insertBefore("javascript","string",{"template-string":{pattern:/`(?:\\[\s\S]|\${[^}]+}|[^\\`])*`/,greedy:!0,inside:{interpolation:{pattern:/\${[^}]+}/,inside:{"interpolation-punctuation":{pattern:/^\${|}$/,alias:"punctuation"},rest:null}},string:/[\s\S]+/}}}),u.languages.javascript["template-string"].inside.interpolation.inside.rest=u.languages.javascript,u.languages.markup&&u.languages.insertBefore("markup","tag",{script:{pattern:/(<script[\s\S]*?>)[\s\S]*?(?=<\/script>)/i,lookbehind:!0,inside:u.languages.javascript,alias:"language-javascript",greedy:!0}}),u.languages.js=u.languages.javascript,"undefined"!=typeof self&&self.Prism&&self.document&&document.querySelector&&(self.Prism.fileHighlight=function(){var l={js:"javascript",py:"python",rb:"ruby",ps1:"powershell",psm1:"powershell",sh:"bash",bat:"batch",h:"c",tex:"latex"};Array.prototype.slice.call(document.querySelectorAll("pre[data-src]")).forEach(function(e){for(var t,n=e.getAttribute("data-src"),i=e,r=/\blang(?:uage)?-([\w-]+)\b/i;i&&!r.test(i.className);)i=i.parentNode;if(i&&(t=(e.className.match(r)||[,""])[1]),!t){var a=(n.match(/\.(\w+)$/)||[,""])[1];t=l[a]||a}var o=document.createElement("code");o.className="language-"+t,e.textContent="",o.textContent="Loading…",e.appendChild(o);var s=new XMLHttpRequest;s.open("GET",n,!0),s.onreadystatechange=function(){4==s.readyState&&(s.status<400&&s.responseText?(o.textContent=s.responseText,u.highlightElement(o)):400<=s.status?o.textContent="✖ Error "+s.status+" while fetching file: "+s.statusText:o.textContent="✖ Error: File does not exist or is empty")},s.send(null)}),u.plugins.toolbar&&u.plugins.toolbar.registerButton("download-file",function(e){var t=e.element.parentNode;if(t&&/pre/i.test(t.nodeName)&&t.hasAttribute("data-src")&&t.hasAttribute("data-download-link")){var n=t.getAttribute("data-src"),i=document.createElement("a");return i.textContent=t.getAttribute("data-download-link-label")||"Download",i.setAttribute("download",""),i.href=n,i}})},document.addEventListener("DOMContentLoaded",self.Prism.fileHighlight))}).call(e,function(){return this}())},function(e,t){e.exports={from:function(e,t){var n=1===(e.parent||e).nodeType?e.parent||e:document.querySelector(e.parent||e),i=[].filter.call("string"==typeof e.slides?n.querySelectorAll(e.slides):e.slides||n.children,function(e){return"SCRIPT"!==e.nodeName}),r=i[0],a={},o=function(e,t){i[e]&&(c("deactivate",u(r,t)),r=i[e],c("activate",u(r,t)))},s=function(e,t){var n=i.indexOf(r)+e;c(0<e?"next":"prev",u(r,t))&&o(n,t)},l=function(e,t){a[e]=(a[e]||[]).filter(function(e){return e!==t})},c=function(e,n){return(a[e]||[]).reduce(function(e,t){return e&&!1!==t(n)},!0)},u=function(e,t){return(t=t||{}).index=i.indexOf(e),t.slide=e,t},d={on:function(e,t){return(a[e]||(a[e]=[])).push(t),l.bind(null,e,t)},off:l,fire:c,slide:function(e,t){if(!arguments.length)return i.indexOf(r);c("slide",u(i[e],t))&&o(e,t)},next:s.bind(null,1),prev:s.bind(null,-1),parent:n,slides:i};return(t||[]).forEach(function(e){e(d)}),o(0),d}}},function(e,t,n){var i;i=function(){return function i(r,a,o){function s(n,e){if(!a[n]){if(!r[n]){if(l)return l(n,!0);throw new Error("Cannot find module '"+n+"'")}var t=a[n]={exports:{}};r[n][0].call(t.exports,function(e){var t=r[n][1][e];return s(t||e)},t,t.exports,i,r,a,o)}return a[n].exports}for(var l=!1,e=0;e<o.length;e++)s(o[e]);return s}({1:[function(e,t,n){var i=e("bespoke-classes"),r=e("insert-css");t.exports=function(){return r('/*! normalize.css v3.0.0 | MIT License | git.io/normalize */html{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:0}article,aside,details,figcaption,figure,footer,header,hgroup,main,nav,section,summary{display:block}audio,canvas,progress,video{display:inline-block;vertical-align:baseline}audio:not([controls]){display:none;height:0}[hidden],template{display:none}a{background:0 0}a:active,a:hover{outline:0}abbr[title]{border-bottom:1px dotted}b{font-weight:700}dfn{font-style:italic}h1{font-size:2em}mark{background:#ff0;color:#000}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sup{top:-.5em}sub{bottom:-.25em}img{border:0}svg:not(:root){overflow:hidden}figure{margin:1em 40px}hr{box-sizing:content-box}pre{overflow:auto}code,kbd,pre,samp{font-size:1em}kbd,pre,samp{font-family:monospace,monospace}button,input,optgroup,select,textarea{color:inherit;font:inherit;margin:0}button{overflow:visible}button,select{text-transform:none}button,html input[type="button"],input[type="reset"],input[type="submit"]{-webkit-appearance:button;cursor:pointer}button[disabled],html input[disabled]{cursor:default}button::-moz-focus-inner,input::-moz-focus-inner{border:0;padding:0}input{line-height:normal}input[type="checkbox"],input[type="radio"]{box-sizing:border-box;padding:0}input[type="number"]::-webkit-inner-spin-button,input[type="number"]::-webkit-outer-spin-button{height:auto}input[type="search"]{-webkit-appearance:textfield;box-sizing:content-box}input[type="search"]::-webkit-search-cancel-button,input[type="search"]::-webkit-search-decoration{-webkit-appearance:none}fieldset{border:1px solid silver;margin:0 2px;padding:.35em .625em .75em}legend{border:0;padding:0}textarea{overflow:auto}optgroup{font-weight:700}table{border-collapse:collapse;border-spacing:0}td,th,*{padding:0}*{margin:0}html{-webkit-text-size-adjust:auto;-ms-text-size-adjust:auto;text-size-adjust:auto}.bespoke-parent{font-size:1.5em;background:#111;color:#ddd;font-family:futura,helvetica,arial,arial,sans-serif;overflow:hidden;text-align:center;-webkit-transition:background 1s ease;transition:background 1s ease;background-position:50% 50%}.bespoke-parent,.bespoke-scale-parent{position:absolute;top:0;left:0;right:0;bottom:0}.bespoke-scale-parent{pointer-events:none;z-index:1}.bespoke-scale-parent .bespoke-active{pointer-events:auto}.bespoke-slide{-webkit-transition:opacity .5s ease;transition:opacity .5s ease;width:940px;height:480px;position:absolute;top:50%;left:50%;margin-left:-470px;margin-top:-240px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-box-align:center;-webkit-align-items:center;-ms-flex-align:center;align-items:center;z-index:1}.bespoke-active{-webkit-transition-delay:.5s;transition-delay:.5s}.bespoke-active[data-bespoke-backdrop]{-webkit-transition-delay:.75s;transition-delay:.75s}.bespoke-inactive{opacity:0;pointer-events:none}.bespoke-backdrop{-webkit-transition:opacity 1s ease;position:absolute;top:0;left:0;right:0;bottom:0}.bespoke-progress-parent{position:absolute;top:0;left:0;right:0;height:.3vw;z-index:1}.bespoke-progress-bar{background:#ddd;position:absolute;top:0;left:0;height:100%;-webkit-transition:width 1s ease;transition:width 1s ease}.bespoke-bullet{-webkit-transition:opacity .3s ease;transition:opacity .3s ease}.bespoke-bullet-inactive{opacity:0}strong{font-weight:400}hr{width:50%;margin:1rem auto;height:1px;border:0;background:#ddd}h3,p,li{padding-left:20px;padding-right:20px}h3,h4,p,li,pre{font-weight:200}h1{line-height:1.4em;padding:1em;border:1px solid #ddd;border-left-width:0;border-right-width:0;min-width:8em}h1,h2{letter-spacing:.3em;text-transform:uppercase;font-weight:400;margin:.17em 0;position:relative}h2{line-height:1.1em;padding:0 0 0 .3em}h3{font-family:didot,times new roman,serif;font-style:italic;font-size:1.2em;line-height:1.6em;margin:.5em 0}h4{text-transform:uppercase;font-size:.8em;line-height:1.8em;letter-spacing:.3em;margin:1em 0}ul,ol{padding:0;margin:0;text-align:left}li{list-style:none;margin:.2em;font-style:normal;-webkit-transform:translateX(-6px);-ms-transform:translateX(-6px);transform:translateX(-6px)}li:before{content:\'\\2014\';margin-right:4px}pre{background:none!important}code{font-family:prestige elite std,consolas,courier new,monospace!important;font-style:normal;font-weight:200!important;text-align:left}a{padding-left:.3em;color:currentColor;text-decoration:none;border-bottom:1px solid currentColor}.emphatic{background:#f30}.single-words{word-spacing:9999px;line-height:2.9em;overflow:hidden}.bespoke-backdrop{opacity:0;-webkit-transition:opacity 1s ease,-webkit-transform 6s ease;transition:opacity 1s ease,transform 6s ease;background-size:cover;background-position:50% 50%;-webkit-transform:translateZ(0)scale(1.3);transform:translateZ(0)scale(1.3)}.bespoke-backdrop-active,.bespoke-backdrop-before{-webkit-transform:translateZ(0);transform:translateZ(0)}.bespoke-backdrop-before{-webkit-transition-delay:.2s;transition-delay:.2s}.bespoke-backdrop-active{opacity:.5}',{prepend:!0}),function(e){i()(e)}}},{"bespoke-classes":2,"insert-css":3}],2:[function(e,t,n){t.exports=function(){return function(a){var o=function(e,t){e.classList.add("bespoke-"+t)},s=function(e,t){e.className=e.className.replace(new RegExp("bespoke-"+t+"(\\s|$)","g")," ").trim()},t=function(e,t){var n=a.slides[a.slide()],i=t-a.slide(),r=0<i?"after":"before";["before(-\\d+)?","after(-\\d+)?","active","inactive"].map(s.bind(null,e)),e!==n&&["inactive",r,r+"-"+Math.abs(i)].map(o.bind(null,e))};o(a.parent,"parent"),a.slides.map(function(e){o(e,"slide")}),a.on("activate",function(e){a.slides.map(t),o(e.slide,"active"),s(e.slide,"inactive")})}}},{}],3:[function(e,t,n){var r={};t.exports=function(e,t){if(!r[e]){r[e]=!0;var n=document.createElement("style");n.setAttribute("type","text/css"),"textContent"in n?n.textContent=e:n.styleSheet.cssText=e;var i=document.getElementsByTagName("head")[0];t&&t.prepend?i.insertBefore(n,i.childNodes[0]):i.appendChild(n)}}},{}]},{},[1])(1)},e.exports=i()},function(e,t){e.exports=function(e){return function(t){var n="vertical"!==e;document.addEventListener("keydown",function(e){(34==e.which||32==e.which&&!e.shiftKey||n&&39==e.which||!n&&40==e.which)&&t.next(),(33==e.which||32==e.which&&e.shiftKey||n&&37==e.which||!n&&38==e.which)&&t.prev()})}}},function(e,t){e.exports=function(r){return function(e){var t,n,i="vertical"==r?"Y":"X";e.parent.addEventListener("touchstart",function(e){1==e.touches.length&&(t=e.touches[0]["page"+i],n=0)}),e.parent.addEventListener("touchmove",function(e){1==e.touches.length&&(e.preventDefault(),n=e.touches[0]["page"+i]-t)}),e.parent.addEventListener("touchend",function(){50<Math.abs(n)&&e[0<n?"prev":"next"]()})}}},function(e,t){e.exports=function(o){return function(e){var t,n,a=e.slides.map(function(e){return[].slice.call(e.querySelectorAll("string"==typeof o?o:"[data-bespoke-bullet]"),0)}),i=function(i,r){t=i,n=r,a.forEach(function(e,n){e.forEach(function(e,t){e.classList.add("bespoke-bullet"),n<i||n===i&&t<=r?(e.classList.add("bespoke-bullet-active"),e.classList.remove("bespoke-bullet-inactive")):(e.classList.add("bespoke-bullet-inactive"),e.classList.remove("bespoke-bullet-active")),n===i&&t===r?e.classList.add("bespoke-bullet-current"):e.classList.remove("bespoke-bullet-current")})})},r=function(e){return void 0!==a[t][n+e]};e.on("next",function(){var e=t+1;if(r(1))return i(t,n+1),!1;a[e]&&i(e,0)}),e.on("prev",function(){var e=t-1;if(r(-1))return i(t,n-1),!1;a[e]&&i(e,a[e].length-1)}),e.on("slide",function(e){i(e.index,0)}),i(0,0)}}},function(e,t){e.exports=function(){return function(i){var r;function e(e){if(e){var t=r.indexOf(e),n=i.slide();a(e,"active"),a(e,"inactive"),a(e,"before"),a(e,"after"),t!==n?(o(e,"inactive"),o(e,t<n?"before":"after")):o(e,"active")}}function a(e,t){e.classList.remove("bespoke-backdrop-"+t)}function o(e,t){e.classList.add("bespoke-backdrop-"+t)}r=i.slides.map(function(e){var t=e.getAttribute("data-bespoke-backdrop");if(t){var n=document.createElement("div");return n.className=t,n.classList.add("bespoke-backdrop"),i.parent.appendChild(n),n}}),i.on("activate",function(){r.forEach(e)})}}},function(e,t){e.exports=function(d){return function(e){var n,i=e.parent,t=e.slides[0],r=t.offsetHeight,a=t.offsetWidth,o="zoom"===d||"zoom"in i.style&&"transform"!==d,s=o?e.slides:e.slides.map(function(e){var t=document.createElement("div");return t.className="bespoke-scale-parent",e.parentNode.insertBefore(t,e),t.appendChild(e),t}),l=(n="Transform","Moz Webkit O ms".split(" ").reduce(function(e,t){return t+n in i.style?t+n:e},n.toLowerCase())),c=o?function(e,t){t.style.zoom=e}:function(e,t){t.style[l]="scale("+e+")"},u=function(){var e=i.offsetWidth/a,t=i.offsetHeight/r;s.forEach(c.bind(null,Math.min(e,t)))};window.addEventListener("resize",u),u()}}},function(e,t){e.exports=function(){return function(i){var r=function(e){var t=-1<e&&e<i.slides.length?e:0;t!==i.slide()&&i.slide(t)},e=function(){var n=window.location.hash.slice(1),e=parseInt(n,10);n&&(e?r(e-1):i.slides.forEach(function(e,t){e.getAttribute("data-bespoke-hash")!==n&&e.id!==n||r(t)}))};setTimeout(function(){e(),i.on("activate",function(e){var t=e.slide.getAttribute("data-bespoke-hash")||e.slide.id;window.location.hash=t||e.index+1}),window.addEventListener("hashchange",e)},0)}}},function(e,t){e.exports=function(r){return function(t){var e=document.createElement("div"),n=document.createElement("div"),i="vertical"===r?"height":"width";e.className="bespoke-progress-parent",n.className="bespoke-progress-bar",e.appendChild(n),t.parent.appendChild(e),t.on("activate",function(e){n.style[i]=100*e.index/(t.slides.length-1)+"%"})}}},function(e,t,n){var i=Function("return this")(),a=(i.bespoke&&i.bespoke.plugins&&i.bespoke.plugins.convenient||n(12)).builder("indexfinger");e.exports=function(e){return function(e){a.activateDeck(e);var t={},n=null,i=-1,r={enableActiveSlideListener:function(){t.saveActiveSlide=this.on("activate",r.saveActiveSlide.bind(this))},saveActiveSlide:function(e){n=e.slide,i=e.index},getActiveSlide:function(){return n},getActiveSlideIndex:function(){return i}};e.getActiveSlide=r.getActiveSlide.bind(e),e.getActiveSlideIndex=r.getActiveSlideIndex.bind(e),r.enableActiveSlideListener.call(e)}}},function(e,t){var l,n,c=Function("return this")(),i={logger:{log:function(){console.log.apply(console,arguments)}}},u={},r=[],d=function(e){(function(t){if(!t)throw l.generateErrorObject("deck must be defined.");return r.some(function(e){return e.deck===t})})(e)||r.push({deck:e,storage:{}})};u.builder=function(t){if(!t)throw l.generateErrorObject("The plugin options were not properly defined.");if("string"==typeof t&&(t={pluginName:t}),"string"!=typeof t.pluginName)throw l.generateErrorObject("The plugin name was not properly defined.");var n={},i="bespoke."+t.pluginName,a=t.pluginName,o=function(e,t,n,i,r,a){return u.createEventData.call(e,t,n,i,r,a)},e=function(e,t,n,i,r){return e.fire(a+"."+t,o(e,a,t,n,i,r))},r=function(e){if(function(e,t){if(!e)throw l.generateErrorObject("pluginName must be defined.");if(!t)throw l.generateErrorObject("deck must be defined.");var n=u.getDeckStorage(t);return!(!n||!n[e])}(t.pluginName,e))throw l.generateErrorObject("The '"+t.pluginName+"' plugin has already been activated for this deck, can't activate it twice.")},s=function(e){return r(e),function(e,t){if(!e)throw l.generateErrorObject("pluginName must be defined.");if(!t)throw l.generateErrorObject("deck must be defined.");var n=u.getDeckStorage(t);n||(d(t),n=u.getDeckStorage(t)),n[e]={}}(t.pluginName,e),function(e){var t={};return t.createEventData=n.createEventData.bind(this,e),t.fire=n.fire.bind(this,e),t.getStorage=n.getStorage.bind(this,e),t.log=n.log.bind(this,e),t}(e)};return function(){n.createEventData=o.bind(this),n.generateErrorObject=function(e){return new Error(i+": "+e)}.bind(this),n.fire=e.bind(this),n.log=function(){var e=[i];c.convenientOptions.logger.log.apply(c.convenientOptions.logger.log,e.concat(u.copyArray(arguments)))}.bind(this),n.activateDeck=s.bind(this),n.getStorage=u.getDeckPluginStorage.bind(this,t.pluginName)}(),n},u.getDeckStorage=function(t){if(!t)throw l.generateErrorObject("deck must be defined.");var n=null;return r.some(function(e){return e.deck===t&&(n=e.storage,!0)}),n},u.getDeckPluginStorage=function(e,t){if(!e)throw l.generateErrorObject("pluginName must be defined.");if(!t)throw l.generateErrorObject("deck must be defined.");var n=u.getDeckStorage(t);if(!n)throw l.generateErrorObject("storage was not initiated for this deck.");return n[e]},u.createEventData=function(e,t,n,i,r){var a;return(r=r||{}).eventNamespace=e||null,r.eventName=t||null,r.innerEvent=n||null,a=i,!isNaN(parseFloat(a))&&isFinite(a)?(r.index=i,r.slide=this.slides[i]):(r.index=this.slides.indexOf(i),r.slide=i),r},u.copyArray=function(e){return[].slice.call(e,0)},l=u.builder("convenient"),(n={logger:{}}).logger.log=c.convenientOptions&&c.convenientOptions.logger&&c.convenientOptions.logger.log||i.logger.log,c.convenientOptions=n,e.exports=u},function(e,t,n){var i="secondary",r=Function("return this")(),c=r.bespoke&&r.bespoke.plugins&&r.bespoke.plugins.convenient||n(12),u=c.builder(i),d=(r.bespoke&&r.bespoke.plugins&&r.bespoke.plugins.indexfinger||n(11),{notes:"aside",keys:{toggle:83}}),p=function(){var e,t,n;return"secondary-window-"+(e=1e3,void 0===(t=1e4)&&(t=e,e=0),n=t-e,e+Math.floor(Math.random()*n))};e.exports=function(l){return function(n){var e,i=u.activateDeck(n),t={},r={getNotesElement:function(){return this.secondary.window&&this.secondary.window.document&&this.secondary.window.document.getElementById("notes")},isOpen:function(){var e=this.secondary,t=e.window;return!(void 0===e||null===t||!0===t.closed||t.opener!==window||null===this.secondary.getNotesElement())},open:function(){return this.secondary.isOpen()||(this.secondary.window=window.open(),this.secondary.window.document.body.innerHTML="<h1>Notes</h1><div id='notes'></div>"),this.secondary.isOpen()},close:function(){return this.secondary.isOpen()&&this.secondary.window.close(),!this.secondary.isOpen()},focus:function(){return this.secondary.isOpen()&&this.secondary.window.focus(),this.secondary.isOpen()},toggle:function(){return this.secondary.isOpen()?this.secondary.close():this.secondary.open(),this.secondary.isOpen()},synchronize:function(){var e,t,n;return!!this.secondary.isOpen()&&(e=this.secondary.getNotesElement(),t=this.getActiveSlide(),n=c.copyArray(t.querySelectorAll(l.notes)).reduce(function(e,t){return e+t.outerHTML},""),e.innerHTML=n,this.secondary.isOpen())}},a=function(e){var t=!1;return e.altKey||e.ctrlKey||e.metaKey||e.shiftKey||(t=t||e.which===l.keys.toggle&&i.fire("toggle",e)&&n.secondary.toggle()&&n.secondary.synchronize()),t&&e.preventDefault(),!t},o=function(){return n.secondary.close(),null},s=function(){n.secondary.synchronize()};l=l||{},(e={}).keys={},e.keys.toggle=l.keys&&l.keys.toggle||d.keys.toggle,e.notes=l.notes||d.notes,l=e,n.secondary={window:null,secondaryWindowName:p(),getNotesElement:r.getNotesElement.bind(n),isOpen:r.isOpen.bind(n),open:r.open.bind(n),close:r.close.bind(n),focus:r.focus.bind(n),toggle:r.toggle.bind(n),synchronize:r.synchronize.bind(n)},window.onbeforeunload=o,document.addEventListener("keydown",a,!1),t.activate=n.on("activate",s)}}}]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
